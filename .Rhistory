# Loading libraries
library(car)
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
New_York_County<-New_York_County[-92,]
attach(New_York_County)
LM_1=data.frame(median_dwell,raw_stop_counts,raw_device_counts,distance_from_home,distance_from_primary_daytime_location)
detach(New_York_County)
attach(LM_1)
## vediamo come sono distribuiti i dati
pairs(LM_1) #(male)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
# mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
# summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
best_lambda_ind=which.max(b$y)
lambda=b$x[best_lambda_ind]
box_cox <- function(x,lambda)
{
if(lambda!=0)
return((x^lambda-1)/lambda)
return(log(x))
}
new_raw_stop_counts = box_cox(raw_stop_counts,lambda)
new_raw_device_counts = box_cox(raw_device_counts,lambda)
new_median_dwell = box_cox(median_dwell,lambda)
mod_boxcox=lm(formula = new_median_dwell ~ new_raw_stop_counts + new_raw_device_counts)
summary(mod_boxcox) #0.38
# #-------------------------------------------------------------------------------
# #2. Proviamo a vedere se cambia qualcosa con il Powertransformation di ogni variabile (univariate)
# #--------------------------------------------------------------------------------
lambda.raw_stop <- powerTransform(raw_stop_counts)
lambda.raw_device <- powerTransform(raw_device_counts)
lambda.median <- powerTransform(median_dwell)
bc.raw_stop <- bcPower(raw_stop_counts, lambda.raw_stop$lambda)
bc.raw_device <- bcPower(raw_device_counts, lambda.raw_device$lambda)
bc.median <- bcPower(median_dwell, lambda.median$lambda)
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.475
mod_power=lm(formula = median_dwell ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.496
mod_power=lm(formula = bc.median ~ raw_stop_counts + raw_device_counts)
summary(mod_power) #0.03
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.478
# #----------------------------------------------------------------------------
# #3. Multivariate case
# #----------------------------------------------------------------------------
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[3])
mod_multivariate=lm(formula = BC.median ~ BC.stop + BC.device)
summary(mod_multivariate) #0.692
# ######################################### SECONDO MODELLO: AGGIUNGO FEATURES ##########################################
#
# #4. Provo con questo metodo ad aggiungere features
#
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.primary + BC.home)
summary(mod_multivariate_complete) #0.6932
vif(mod_multivariate_complete) # c'? collinearit?
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
shapiro.test(residuals(mod_multivariate_complete))
x11()
pairs(LM_2)
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
x11()
pairs(LM_2)
plot(Bc.stop, median_dwell)
plot(BC.stop, median_dwell)
setwd("~/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project")
library(fda)
library(sf)
# tentativi --------------------------------------------------------------------
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
attach(New_York_County_no_river)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
# fra
#load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
#load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
#load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
save (CBG_ny_no_river, file="CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_ny_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
attach(New_York_County_no_river)
View(CBG_ny_no_river)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
help("SpatialPoints")
library(geosphere)
help("SpatialPoints")
library(sp)           ## Data management
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
data_spatial <-data.frame(coord.x,coord.y, median_dwell)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
#diversi z da vedere
z<- median_dwell
data_spatial <-data.frame(coord.x,coord.y, z)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
data_spatial <-data.frame(coord.x,coord.y, z,distance_from_home)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
detach(New_York_County_no_river)
detach(New_York_County_no_river)
detach(New_York_County_no_river)
detach(CBG_ny_no_river)
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
New_York_County=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_index = which(CBG_ny_no_river$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
CBG_ny_no_river = CBG_ny_no_river[CBG_ny_index,]
CBG_ny_index = which(CBG_ny_no_river$County=="New York County")
CBG_ny_no_river = CBG_ny_no_river[CBG_ny_index,]
# tentativi --------------------------------------------------------------------
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
New_York_County=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_index = which(CBG_ny_no_river$County=="New York County")
CBG_ny_no_river = CBG_ny_no_river[CBG_ny_index,]
attach(New_York_County_no_river)
View(CBG_ny_no_river)
View(New_York_County_no_river)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
#diversi z da vedere
z<- median_dwell
data_spatial <-data.frame(coord.x,coord.y, z,distance_from_home)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river = CBG_ny_no_river[CBG_ny_index,]
attach(New_York_County_no_river)
#coordinate in utm
library(sf)
library(sp)           ## Data management
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
#diversi z da vedere
z<- median_dwell
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
#diversi z da vedere
z<- median_dwell
data_spatial <-data.frame(coord.x,coord.y, z,distance_from_home)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
# tentativi --------------------------------------------------------------------
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
attach(New_York_County_no_river)
#coordinate in utm
library(sf)
library(sp)           ## Data management
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
#diversi z da vedere
z<- median_dwell
#funzione f(si) da scegliere
distance <-
data_spatial <-data.frame(coord.x,coord.y, z)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
help("ssplot")
help("spplot")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
library(ggplot2)
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="yellow", high="black") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="red")
x11()
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
View(New_York_County_no_river)
#diversi z da vedere
z<- raw_stop_counts
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=raw_stop_counts))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
#diversi z da vedere
z<- raw_device_counts
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=raw_device_counts))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
View(New_York_County_no_river)
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=distance_from_home))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
rem <- which(distance_from_home > 12000)
min(distance_from_home)
max(distance_from_home)
rem <- which(distance_from_home > 12500)
rem <- which(distance_from_home > 125000)
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[rem,], fill="blue")
rem <- which(distance_from_home > 50000)
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[rem,], fill="blue")
rem <- which(distance_from_home > 30000) #[³6] > 125000, [175]  > 50000,
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[rem,], fill="blue")
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[rem,], fill="blue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="green")
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
data_spatial <-data.frame(coord.x,coord.y, distance_from_home, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
data_spatial <-data.frame(coord.x,coord.y, distance_from_home, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'distance from home')
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
library(geosphere)
library(sf)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(ggplot2)
library(raster)
library(rgdal)
x11()
spplot(data_spatial,'distance from home')
# data_spatial <-data.frame(coord.x,coord.y, z)
# coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=distance_from_home[-rem]))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[rem,], fill="blue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="green")
View(data_spatial)
x11()
spplot(data_spatial,'median_dwell')
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
data_spatial <-data.frame(coord.x,coord.y, distance_from_home, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'distance from home')
attach(New_York_County_no_river)
data_spatial <-data.frame(coord.x,coord.y, distance_from_home, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'distance from home')
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'distance from home')
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
spplot(data_spatial,'median_dwell')
