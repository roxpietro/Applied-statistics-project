# spline degree  #DEGREE = ORDER - 1
basis <- create.bspline.basis(rangeval=c(1,30), nbasis=nbasis, norder=m)
time=1:30
data_W.fd.1 <- Data2fd(y = stops,argvals = time,basisobj = basis) #SMOOTHING
plot.fd(data_W.fd.1)
# FPCA
arm=5 #numero armoniche
plot.fd(data_W.fd.1)
pca_W.1 <- pca.fd(data_W.fd.1,nharm=arm,centerfns=TRUE) #build a functional object before run it -> smoothing preprocessing
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first are non null
plot(pca_W.1$values[1:5],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.1$values)[1:5]/sum(pca_W.1$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2,3))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1')
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2')
plot(pca_W.1$harmonics[3,],col=2,ylab='FPC3')
par(mfrow=c(1,3))
plot.pca.fd(pca_W.1, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# scatter plot of the scores
par(mfrow=c(1,2))
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], labels=New_York_County$area, cex=1)
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], cex=1)
# outliers
out=c(566,106,1157)
cbg_out=New_York_County[out,1]
layout(1)
x11()
matplot(stops,type='l')
lines(stops[,566],lwd=4, col=2)
lines(stops[,106],lwd=4, col=1)
lines(stops[,1157],lwd=4, col=3)
# togliamo questi outliers
stops<-stops[,-out]
matplot(stops,type='l')
# dal matplot vediamo che ci sono due comportamenti diversi, proviamo a togliere il fiume..
#...non cambia molto, significa che dobbiamo capire la discriminante
New_York_County_no_river<-New_York_County_no_river[-which(New_York_County_no_river$area %in% cbg_out),]
CBG_ny_no_river<-CBG_ny_no_river[-which(CBG_ny_no_river$CensusBlockGroup %in% cbg_out),]
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
attach(New_York_County_no_river)
stops<-matrix(nrow = 1090, ncol=30)
for (i in 1:1090) {
stops[i,]<-stops_by_day[[i]]
}
detach(New_York_County_no_river)
stops<-t(stops)
x11()
matplot(stops,type='l')
nbasis <- 22
basis <- create.fourier.basis(rangeval=c(1,30),nbasis=nbasis) # creates a fourier basis
time=1:30
data_W.fd.1 <- Data2fd(y = stops,argvals = time,basisobj = basis) #SMOOTHING
plot.fd(data_W.fd.1, ylim = c(0,2000))
# FPCA
arm=5 #numero armoniche
pca_W.1 <- pca.fd(data_W.fd.1,nharm=arm,centerfns=TRUE) #build a functional object before run it -> smoothing preprocessing
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first are non null
plot(pca_W.1$values[1:5],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.1$values)[1:5]/sum(pca_W.1$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2,3))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1')
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2')
plot(pca_W.1$harmonics[3,],col=2,ylab='FPC3')
par(mfrow=c(1,3))
plot.pca.fd(pca_W.1, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# scatter plot of the scores
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
text(pca_W.1$scores[,1],pca_W.1$scores[,2], labels=New_York_County$area, cex=1)
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], cex=1)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
library(geosphere)
library(sf)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(ggplot2)
library(raster)
library(rgdal)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
help("st_centroid")
library(sf)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
New_York_County=New_York_County[order(New_York_County$area),]
attach(New_York_County)
stops<-matrix(nrow = 1168, ncol=30)
for (i in 1:dim(New_York_County)[1]) {
stops[i,]<-stops_by_day[[i]]
}
detach(New_York_County)
stops<-t(stops)
colnames(stops)<-New_York_County$area
matplot(stops,type='l')
#B-SPLINES
# Set parameters
nbasis <- 13
m <- 3+1        # spline order
# spline degree  #DEGREE = ORDER - 1
basis <- create.bspline.basis(rangeval=c(1,30), nbasis=nbasis, norder=m)
time=1:30
data_W.fd.1 <- Data2fd(y = stops,argvals = time,basisobj = basis) #SMOOTHING
plot.fd(data_W.fd.1)
arm=5 #numero armoniche
plot.fd(data_W.fd.1)
pca_W.1 <- pca.fd(data_W.fd.1,nharm=arm,centerfns=TRUE) #build a functional object before run it -> smoothing preprocessing
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first are non null
plot(pca_W.1$values[1:5],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.1$values)[1:5]/sum(pca_W.1$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2,3))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1')
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2')
plot(pca_W.1$harmonics[3,],col=2,ylab='FPC3')
par(mfrow=c(1,3))
plot.pca.fd(pca_W.1, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# scatter plot of the scores
par(mfrow=c(1,2))
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], labels=New_York_County$area, cex=1)
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], cex=1)
# outliers
out=c(566,106,1157)
cbg_out=New_York_County[out,1]
layout(1)
x11()
matplot(stops,type='l')
lines(stops[,566],lwd=4, col=2)
lines(stops[,106],lwd=4, col=1)
# togliamo questi outliers
stops<-stops[,-out]
matplot(stops,type='l')
New_York_County_no_river<-New_York_County_no_river[-which(New_York_County_no_river$area %in% cbg_out),]
CBG_ny_no_river<-CBG_ny_no_river[-which(CBG_ny_no_river$CensusBlockGroup %in% cbg_out),]
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
attach(New_York_County_no_river)
stops<-matrix(nrow = 1090, ncol=30)
for (i in 1:1090) {
stops[i,]<-stops_by_day[[i]]
}
detach(New_York_County_no_river)
stops<-t(stops)
x11()
nbasis <- 22
basis <- create.fourier.basis(rangeval=c(1,30),nbasis=nbasis) # creates a fourier basis
time=1:30
data_W.fd.1 <- Data2fd(y = stops,argvals = time,basisobj = basis) #SMOOTHING
plot.fd(data_W.fd.1, ylim = c(0,2000))
arm=5 #numero armoniche
pca_W.1 <- pca.fd(data_W.fd.1,nharm=arm,centerfns=TRUE) #build a functional object before run it -> smoothing preprocessing
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first are non null
plot(pca_W.1$values[1:5],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.1$values)[1:5]/sum(pca_W.1$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2,3))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1')
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2')
plot(pca_W.1$harmonics[3,],col=2,ylab='FPC3')
par(mfrow=c(1,3))
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
attach(New_York_County_no_river)
stops<-matrix(ncol=30, nrow = 1092-964)
k=1
index<-c()
for (i in 1:dim(New_York_County_no_river)[1]) {
if (max(stops_by_day[[i]])>250) {
stops[k,]<-stops_by_day[[i]]
index[k]<-i
k=k+1
}
}
# fra
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/NYC_no_river.RData")
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
#terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
New_York_County=New_York_County[order(New_York_County$area),]
attach(New_York_County)
stops<-matrix(nrow = 1168, ncol=30)
for (i in 1:dim(New_York_County)[1]) {
stops[i,]<-stops_by_day[[i]]
}
detach(New_York_County)
stops<-t(stops)
colnames(stops)<-New_York_County$area
matplot(stops,type='l')
# outliers
out=c(566,106,1157)
cbg_out=New_York_County[out,1]
layout(1)
x11()
matplot(stops,type='l')
lines(stops[,566],lwd=4, col=2)
lines(stops[,106],lwd=4, col=1)
lines(stops[,1157],lwd=4, col=3)
# togliamo questi outliers
stops<-stops[,-out]
matplot(stops,type='l')
New_York_County_no_river<-New_York_County_no_river[-which(New_York_County_no_river$area %in% cbg_out),]
CBG_ny_no_river<-CBG_ny_no_river[-which(CBG_ny_no_river$CensusBlockGroup %in% cbg_out),]
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
attach(New_York_County_no_river)
stops<-matrix(nrow = 1090, ncol=30)
for (i in 1:1090) {
stops[i,]<-stops_by_day[[i]]
}
detach(New_York_County_no_river)
detach(New_York_County_no_river)
detach(New_York_County_no_river)
stops<-t(stops)
x11()
matplot(stops,type='l')
nbasis <- 22
basis <- create.fourier.basis(rangeval=c(1,30),nbasis=nbasis) # creates a fourier basis
time=1:30
data_W.fd.1 <- Data2fd(y = stops,argvals = time,basisobj = basis) #SMOOTHING
plot.fd(data_W.fd.1, ylim = c(0,2000))
arm=5 #numero armoniche
pca_W.1 <- pca.fd(data_W.fd.1,nharm=arm,centerfns=TRUE) #build a functional object before run it -> smoothing preprocessing
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first are non null
plot(pca_W.1$values[1:5],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.1$values)[1:5]/sum(pca_W.1$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
layout(cbind(1,2,3))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1')
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2')
plot(pca_W.1$harmonics[3,],col=2,ylab='FPC3')
par(mfrow=c(1,3))
plot.pca.fd(pca_W.1, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# scatter plot of the scores
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
text(pca_W.1$scores[,1],pca_W.1$scores[,2], labels=New_York_County$area, cex=1)
x11()
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca_W.1$scores[,1],pca_W.1$scores[,2], cex=1)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
x11()
plot(coord.x_long,coord.y_lat,xlab="longitude",ylab="latitude",lwd=2)
outliers<-c(346,358)
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
attach(New_York_County_no_river)
stops<-matrix(ncol=30, nrow = 1092-964)
k=1
index<-c()
for (i in 1:dim(New_York_County_no_river)[1]) {
if (max(stops_by_day[[i]])>250) {
stops[k,]<-stops_by_day[[i]]
index[k]<-i
k=k+1
}
}
detach(New_York_County_no_river)
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, fill="black")+
geom_sf(data = CBG_ny_no_river$geometry[index], fill="red")
stops<-t(stops)
library(geosphere)
library(sf)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(ggplot2)
library(raster)
library(rgdal)
# fra
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
#
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
View(New_York_County)
#f(s_i) = distance from home
distance <- New_York_County$distance_from_home
New_York_County<-New_York_County[-index_river,]
attach(New_York_County)
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
View(New_York_County)
New_York_County<-New_York_County[-index_river,]
attach(New_York_County)
#f(s_i) = distance from home
distance <- distance_from_home
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# fra
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
#
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
New_York_County<-New_York_County[-index_river,]
attach(New_York_County)
#f(s_i) = distance from home
distance <- distance_from_home
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of median_dwell variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(median_dwell)', prob = TRUE, xlab = 'log(median_dwell)')
hist(bc.median_dwell, breaks=16, col="grey", main='Histogram of log(median_dwell)', prob = TRUE, xlab = 'log(median_dwell)')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
spplot(data_spatial,'median_dwell')
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(bc.median_dwell ~ sqrt(distance), as.data.frame(data_spatial))
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data_spatial))
v.1 <- variogram(log(median_dwell) ~ 1, data = data_spatial,boundaries = c(0,200,seq(400,6000,450)))
v.1 <- variogram(log(median_dwell) ~ distance, data = data_spatial,boundaries = c(0,200,seq(400,6000,450)))
fit1=fit.variogram(v.1, vgm(0.4, model='Exp', 5000, nugget=0.2))
x11()
plot(v.1, fit1, pch = 3)
sud <- c(which(CBG_ny_no_river$TractCode<="013900"),
which(CBG_ny_no_river$TractCode=='031900'),
which(CBG_ny_no_river$TractCode=='031704'),
which(CBG_ny_no_river$TractCode=='031703'),
which(CBG_ny_no_river$TractCode=='031704'))
DUMMY <- rep(0,1092)
DUMMY[sud] <- 1
data <- data.frame(coord.x, coord.y, median_dwell,DUMMY, distance)
detach(New_York_County)
coordinates(data) <- c('coord.x','coord.y')
v <- variogram(log(median_dwell) ~ DUMMY + distance + distance*DUMMY, data = data_spatial)
plot(v)
# non converge, dato che c'? poca variabilit? tra i dati
v <- variogram(log(median_dwell) ~ DUMMY + distance + distance*DUMMY, data = data_spatial,boundaries = c(0,200,seq(400,6000,450)))
plot(v)
v.fit <- fit.variogram(v, vgm(0.4, "Exp", 3000, 0.2))
x11()
plot(v, v.fit, pch = 3)
v.fit
#f(s_i) = distance from primary location
distance <- distance_from_primary_daytime_location
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
attach(New_York_County)
#f(s_i) = distance from primary location
distance <- distance_from_primary_daytime_location
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
spplot(data_spatial,'median_dwell')
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data_spatial))
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
#serve per vedere se si nota correlazione, dipendenza, tra funzione della posizione scelta e Z(median_dwell)
xyplot(log(median_dwell) ~ distance, as.data.frame(data_spatial))
v.1 <- variogram(log(median_dwell) ~ distance, data = data_spatial,boundaries = c(0,200,seq(400,6000,450)))
fit1=fit.variogram(v.1, vgm(0.4, model='Exp', 5000, nugget=0.2))
x11()
plot(v.1, fit1, pch = 3)
x11()
spplot(data_spatial,'median_dwell')
#-------------------------------------------------------------------------------
attach(New_York_County)
