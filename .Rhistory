coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
area_cbg=matrix(nrow = 1092, ncol = 1)
#par(mfrow=c(4,5))
for (i in 1:1092) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=CBG_ny_no_river$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg<-area_cbg/10^6
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of med variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(med)', prob = TRUE, xlab = 'log(med)')
rem <- which(median_dwell > 350)
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=med[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue") +
geom_sf(data = CBG_ny_no_river$geometry[rem], fill = "grey")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue") +
geom_sf(data = CBG_ny_no_river$geometry[rem], fill = "black")
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue") +
geom_sf(data = CBG_ny_no_river$geometry[rem], fill = "black")
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river = CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
x11() #controlla se plotta i centroidi
plot(coord.x_long,coord.y_lat,xlab="longitude",ylab="latitude",lwd=2)
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
# dist=distm(cbind(coord.x_long, coord.y_lat), cbind(coord_riv.x_long, coord_riv.y_lat), fun = distGeo)
distance<-c()
attach(New_York_County_no_river)
attach(CBG_ny_no_river)
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
area_cbg=matrix(nrow = 1092, ncol = 1)
#par(mfrow=c(4,5))
for (i in 1:1092) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=CBG_ny_no_river$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg<-area_cbg/10^6
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of med variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(med)', prob = TRUE, xlab = 'log(med)')
rem <- which(median_dwell > 350)
x11()
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
geom_sf(data = CBG_ny_no_river$geometry[which(CBG_ny_no_river$TractCode=="011300"),], fill="blue") +
geom_sf(data = CBG_ny_no_river$geometry[rem], fill = "black")
x11()
spplot(data_spatial,'median_dwell')
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
xyplot(log(median_dwell[-rem]) ~ sqrt(distance[-rem]), as.data.frame(data_spatial))
#-------------------------------------------------------
#DENSITY
med<-median_dwell/area_cbg
med_dwell <- med[-rem]
#-------------------------------------------------------
#DENSITY
med<-median_dwell/area_cbg
plot(med)
rem<-which(med>5*10^4)
rem<-which(med>10^4)
rem<-which(med>3*10^4)
med_dwell <- med[-rem]
dist <- distance[-rem]
data_spat <- data.frame(coord.x[-rem],coord.y[-rem], med_dwell, dist)
names(data_spat) <- c('x','y','dist', 'distance')
coordinates(data_spat)<-c('x', 'y')
x11()
xyplot(log(med_dwell) ~ sqrt(distance), as.data.frame(data_spat))
xyplot((med_dwell) ~ sqrt(distance), as.data.frame(data_spat))
xyplot(log(med_dwell) ~ sqrt(distance), as.data.frame(data_spat))
xyplot(log(med_dwell) ~ log(distance), as.data.frame(data_spat))
xyplot(log(med_dwell) ~ sqrt(log(distance)), as.data.frame(data_spat))
xyplot(log(med_dwell) ~ log(sqrt(distance)), as.data.frame(data_spat))
xyplot(log(med_dwell) ~ sqrt(distance), as.data.frame(data_spat))
library(car)
lambda <- powerTransform(med_dwell)
plot(med_dwell)
library(car)
lambda <- powerTransform(med_dwell)
bc.med_dwell <- bcPower(med_dwell, lambda$lambda)
lambda$lambda
library(car)
lambda <- powerTransform(med_dwell)
bc.med_dwell <- bcPower(med_dwell, lambda$lambda)
hist(bc.med_dwell, breaks=16, col="grey", main='Histogram of bc dist', prob = TRUE, xlab = 'bc dist from home')
xyplot(bc.med_dwell ~ sqrt(distance), as.data.frame(data_spat))
xyplot(bc.med_dwell ~ log(distance), as.data.frame(data_spat))
xyplot(bc.med_dwell ~ (distance), as.data.frame(data_spat))
xyplot(log(bc.med_dwell) ~ sqrt(distance), as.data.frame(data_spat))
xyplot(log(bc.med_dwell) ~ log(distance), as.data.frame(data_spat))
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
i=15
print(which(unique(census_blocks_ny$County))[i])
which(unique(census_blocks_ny$County))[i]
print(which(unique(census_blocks_ny$County)[i]))
unique(census_blocks_ny$County)
print(unique(census_blocks_ny$County)[i])
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca County")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca county")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca county")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca County")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca County")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Seneca County.RData")
geo<-census_blocks_ny[which(census_blocks_ny$County==unique(census_blocks_ny$County)[i]),]
geo<-census_blocks_ny[which(census_blocks_ny$County==unique(census_blocks_ny$County)[i]),]
geo=geo[order(geo$CensusBlockGroup),]
centroids_NY <- st_centroid(geo$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
x11() #controlla se plotta i centroidi
plot(coord.x_long,coord.y_lat,xlab="longitude",ylab="latitude",lwd=2)
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
CBG_RIVER<-geo[which(geo$BlockGroup==0),]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
# dist=distm(cbind(coord.x_long, coord.y_lat), cbind(coord_riv.x_long, coord_riv.y_lat), fun = distGeo)
distance<-c()
attach(New_York_County_no_river)
attach(CBG_ny_no_river)
attach(sub_patt)
attach(geo)
area_cbg=matrix(nrow = dim(sub_patt)[1], ncol = 1)
area_cbg=matrix(nrow = dim(sub_patt)[1], ncol = 1)
#par(mfrow=c(4,5))
for (i in 1:dim(sub_patt)[1]) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=geo$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg<-area_cbg/10^6
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
attach(sub_patt)
data_spatial <-data.frame(coord.x,coord.y, median_dwell, distance)
data_spatial <-data.frame(coord.x,coord.y, median_dwell)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of med variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(med)', prob = TRUE, xlab = 'log(med)')
x11()
ggplot() +
geom_sf(data = geo$geometry[-rem], aes(fill=median_dwell[-rem]))+scale_fill_gradient(low="lightyellow", high="red") +
#geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red") +
#geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
i=23
print(unique(census_blocks_ny$County)[i])
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Chemung County.RData")
sub_patt=sub_patt[order(sub_patt$area),]
geo<-census_blocks_ny[which(census_blocks_ny$County==unique(census_blocks_ny$County)[i]),]
geo=geo[order(geo$CensusBlockGroup),]
centroids_NY <- st_centroid(geo$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
x11() #controlla se plotta i centroidi
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
CBG_RIVER<-geo[which(geo$BlockGroup==0),]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
# dist=distm(cbind(coord.x_long, coord.y_lat), cbind(coord_riv.x_long, coord_riv.y_lat), fun = distGeo)
distance<-c()
attach(sub_patt)
attach(geo)
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
area_cbg=matrix(nrow = dim(sub_patt)[1], ncol = 1)
#par(mfrow=c(4,5))
for (i in 1:dim(sub_patt)[1]) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=geo$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg<-area_cbg/10^6
data_spatial <-data.frame(coord.x,coord.y, median_dwell)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of med variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(med)', prob = TRUE, xlab = 'log(med)')
x11()
ggplot() +
geom_sf(data = geo$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red")
i=24
print(unique(census_blocks_ny$County)[i])
census_blocks_ny=census_blocks_ny[order(census_blocks_ny$CensusBlockGroup),]
print(unique(census_blocks_ny$County)[i])
i=15
census_blocks_ny=census_blocks_ny[order(census_blocks_ny$CensusBlockGroup),]
print(unique(census_blocks_ny$County)[i])
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/Erie County.RData")
sub_patt<-Erie
sub_patt=sub_patt[order(sub_patt$area),]
geo<-census_blocks_ny[which(census_blocks_ny$County==unique(census_blocks_ny$County)[i]),]
geo=geo[order(geo$CensusBlockGroup),]
centroids_NY <- st_centroid(geo$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
CBG_RIVER<-geo[which(geo$BlockGroup==0),]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x_long <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y_lat <- coord_river[seq(2,length(coord_river),by=2)]
coord<-SpatialPoints(cbind(coord_riv.x_long,coord_riv.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.riv <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord_riv.x <- coord.UTM.riv@coords[,1]
coord_riv.y <- coord.UTM.riv@coords[,2]
# dist=distm(cbind(coord.x_long, coord.y_lat), cbind(coord_riv.x_long, coord_riv.y_lat), fun = distGeo)
distance<-c()
attach(sub_patt)
attach(geo)
#f(s_i) = distanza da ipotetico centro di times square
k <- which(CBG_ny_no_river$TractCode == '011300')
centroid_TimesSquare <- st_centroid(CBG_ny_no_river$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
area_cbg=matrix(nrow = dim(sub_patt)[1], ncol = 1)
#par(mfrow=c(4,5))
for (i in 1:dim(sub_patt)[1]) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=geo$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg<-area_cbg/10^6
data_spatial <-data.frame(coord.x,coord.y, median_dwell)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
# histogram of med variable
hist(median_dwell, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
# highly skewed, transform to the log
hist(log(median_dwell), breaks=16, col="grey", main='Histogram of log(med)', prob = TRUE, xlab = 'log(med)')
x11()
geom_sf(data = geo$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red")
#geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red")
#geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0),], aes(fill=median_dwell[-which(geo$BlockGroup==0),]))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")+
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
spplot(data_spatial,'median_dwell')
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
xyplot(log(median_dwell[-rem]) ~ sqrt(distance[-rem]), as.data.frame(data_spatial))
xyplot(log(median_dwell) ~ sqrt(distance), as.data.frame(data_spatial))
plot(median_dwell)
which.max(median_dwell)
geo$CensusBlockGroup[which.max(median_dwell)]
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]/area_cbg))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]/area_cbg))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=median_dwell[-which(geo$BlockGroup==0)]/area_cbg))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
m=median_dwell[-which(geo$BlockGroup==0)]/area_cbg
m=median_dwell[-which(geo$BlockGroup==0)]/area_cbg[-which(geo$BlockGroup==0)]
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=m))+scale_fill_gradient(low="lightyellow", high="red")
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=m))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=log(m)))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
v.1 <- variogram(log(m) ~ 1, data = data_spatial)
coord.x<-coord.x[-which(geo$BlockGroup==0)]
coord.y<-coord.y[-which(geo$BlockGroup==0)]
coord.x<-coord.x[-which(geo$BlockGroup==0)]
coord.y<-coord.y[-which(geo$BlockGroup==0)]
data_spatial <-data.frame(coord.x,coord.y, m)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
v.1 <- variogram(log(m) ~ 1, data = data_spatial)
plot(v.1)
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$BlockGroup==0)], aes(fill=log(m)))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
x11()
ggplot() +
geom_sf(data = geo$geometry[-which(geo$TractCode=='016500')], aes(fill=log(m)))+scale_fill_gradient(low="lightyellow", high="red")
x11()
ggplot() +
geom_sf(data = geo$geometry[which(geo$TractCode=='016500')], aes(fill=log(m)))+scale_fill_gradient(low="lightyellow", high="red")
geo$geometry[which(geo$TractCode=='016500')]
ggplot() +
geom_sf(data = geo$geometry[which(geo$TractCode=='016500')])
geo$geometry[which(geo$TractCode=='016500')]
View(geo)
#f(s_i) = distanza da ipotetico centro di times square
k <- which(geo$TractCode == '016500')
centroid_TimesSquare <- st_centroid(geo$geometry[k,], of_largest_polygon = FALSE)
coord_cTS <- as.numeric(unlist(centroid_TimesSquare))
coord_cTS.x_long <- coord_cTS[1]
coord_cTS.y_lat <- coord_cTS[2]
distance<-distm(cbind(coord.x_long, coord.y_lat), cbind(coord_cTS.x_long, coord_cTS.y_lat), fun = distGeo)
dist<-distance[-which(geo$BlockGroup==0)]
dist<-distance[-which(geo$BlockGroup==0)]
data_spatial <-data.frame(coord.x,coord.y, m, dist)
coordinates(data_spatial)<-c('coord.x', 'coord.y')
v.1 <- variogram(log(m) ~ 1, data = data_spatial)
plot(v.1)
v.1 <- variogram((m) ~ 1, data = data_spatial)
plot(v.1)
hist(m, breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
hist(log(m), breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
v.1 <- variogram(log(m) ~ dist, data = data_spatial)
plot(v.1)
fit1=fit.variogram(v.1, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v.1, fit1, pch = 3)
v.1 <- variogram((m) ~ dist, data = data_spatial)
plot(v.1)
xyplot(log(m) ~ sqrt(distance), as.data.frame(data_spat))
x11()
xyplot(log(m) ~ sqrt(distance), as.data.frame(data_spatial))
library(car)
lambda <- powerTransform(m)
bc.med_dwell <- bcPower(m, lambda$lambda)
lambda$lambda
hist(bc.med_dwell, breaks=16, col="grey", main='Histogram of bc dist', prob = TRUE, xlab = 'bc dist from home')
hist(log(m), breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE, xlab = 'median dwell') #asymmetric data
v <- variogram(log(bc.med_dwell) ~ dist, data = data_spatial)
plot(v)
v <- variogram(log(bc.med_dwell) ~ dist, data = data_spatial)
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
logical.return = FALSE, warn.conflicts, quietly = FALSE,
verbose = getOption("verbose"), mask.ok, exclude, include.only,
attach.required = missing(include.only))
library(car)
lambda <- powerTransform(m)
bc.med_dwell <- bcPower(m, lambda$lambda)
hist(bc.med_dwell, breaks=16, col="grey", main='Histogram of bc dist', prob = TRUE, xlab = 'bc dist from home')
v <- variogram(log(bc.med_dwell) ~ dist, data = data_spatial)
plot(v)
v <- variogram(log(bc.med_dwell) ~ dist, data = data_spatial)
v <- variogram(bc.med_dwell ~ dist, data = data_spatial)
plot(v)
fit1=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v.1, fit1, pch = 3)
v <- variogram(bc.med_dwell ~ dist, data = data_spatial)
plot(v)
fit=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v, fit, pch = 3)
v.1 <- variogram(log(m) ~ dist, data = data_spatial,cutoff=20000)
plot(v.1)
fit1=fit.variogram(v.1, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v.1, fit1, pch = 3)
<- variogram(bc.med_dwell ~ dist, data = data_spatial, cutoff=20000)
plot(v)
fit=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v, fit, pch = 3)
v <- variogram(bc.med_dwell ~ dist, data = data_spatial, cutoff=20000)
plot(v)
fit=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v, fit, pch = 3)
xyplot(bc.med_dwell ~ sqrt(distance), as.data.frame(data_spatial))
xyplot(bc.med_dwell ~ (distance), as.data.frame(data_spatial))
v.1 <- variogram(log(m) ~ sqrt(dist), data = data_spatial,cutoff=20000)
plot(v.1)
fit1=fit.variogram(v.1, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v.1, fit1, pch = 3)
v <- variogram(bc.med_dwell ~ sqrt(dist), data = data_spatial, cutoff=20000)
plot(v)
fit=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
x11()
plot(v, fit, pch = 3)
fit
v.1 <- variogram(log(m) ~ sqrt(dist), data = data_spatial,cutoff=20000)
plot(v.1)
fit1=fit.variogram(v.1, vgm(1.5, model='Exp', 15000, nugget=1))
fit1
x11()
plot(v.1, fit1, pch = 3)
v <- variogram(bc.med_dwell ~ sqrt(dist), data = data_spatial, cutoff=20000)
plot(v)
fit=fit.variogram(v, vgm(1.5, model='Exp', 15000, nugget=1))
fit
x11()
plot(v, fit, pch = 3)
#terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
#######################################################
####### FAST FOOD FREQ - LINEAR REGRESSION ############
#######################################################
library(car)
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
library(sf)
library(sp)
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
library(sf)
library(sp)
