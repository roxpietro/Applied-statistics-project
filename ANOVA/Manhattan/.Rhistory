# Loading libraries
library(car)
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
New_York_County<-New_York_County[-92,]
attach(New_York_County)
LM_1=data.frame(median_dwell,raw_stop_counts,raw_device_counts,distance_from_home,distance_from_primary_daytime_location)
detach(New_York_County)
attach(LM_1)
## vediamo come sono distribuiti i dati
pairs(LM_1) #(male)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
# mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
# summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
best_lambda_ind=which.max(b$y)
lambda=b$x[best_lambda_ind]
box_cox <- function(x,lambda)
{
if(lambda!=0)
return((x^lambda-1)/lambda)
return(log(x))
}
new_raw_stop_counts = box_cox(raw_stop_counts,lambda)
new_raw_device_counts = box_cox(raw_device_counts,lambda)
new_median_dwell = box_cox(median_dwell,lambda)
mod_boxcox=lm(formula = new_median_dwell ~ new_raw_stop_counts + new_raw_device_counts)
summary(mod_boxcox) #0.38
# #-------------------------------------------------------------------------------
# #2. Proviamo a vedere se cambia qualcosa con il Powertransformation di ogni variabile (univariate)
# #--------------------------------------------------------------------------------
lambda.raw_stop <- powerTransform(raw_stop_counts)
lambda.raw_device <- powerTransform(raw_device_counts)
lambda.median <- powerTransform(median_dwell)
bc.raw_stop <- bcPower(raw_stop_counts, lambda.raw_stop$lambda)
bc.raw_device <- bcPower(raw_device_counts, lambda.raw_device$lambda)
bc.median <- bcPower(median_dwell, lambda.median$lambda)
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.475
mod_power=lm(formula = median_dwell ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.496
mod_power=lm(formula = bc.median ~ raw_stop_counts + raw_device_counts)
summary(mod_power) #0.03
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.478
# #----------------------------------------------------------------------------
# #3. Multivariate case
# #----------------------------------------------------------------------------
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[3])
mod_multivariate=lm(formula = BC.median ~ BC.stop + BC.device)
summary(mod_multivariate) #0.692
# ######################################### SECONDO MODELLO: AGGIUNGO FEATURES ##########################################
#
# #4. Provo con questo metodo ad aggiungere features
#
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.primary + BC.home)
summary(mod_multivariate_complete) #0.6932
vif(mod_multivariate_complete) # c'? collinearit?
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
shapiro.test(residuals(mod_multivariate_complete))
x11()
pairs(LM_2)
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
x11()
pairs(LM_2)
plot(Bc.stop, median_dwell)
plot(BC.stop, median_dwell)
# Set Working Directory
setwd("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/anova")
library(RColorBrewer)
library("viridis")
# Load Dataset
load("~/Documenti/UNIVERSITA/STAT APP/progetto/Patterns_NY.RData")
load("~/Documenti/UNIVERSITA/STAT APP/progetto/Cyber.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
library(geosphere)
area_cbg=matrix(nrow = 1, ncol = 15463)
load("~/Documenti/UNIVERSITA/STAT APP/progetto/Cyber.RData")
area_cbg=matrix(nrow = 1, ncol = 15463)
#par(mfrow=c(4,5))
for (i in 1:15463) {
#points=census_blocks_ny$geometry[[i]][[1]][[1]][,1],census_blocks_ny$geometry[[i]][[1]][[1]][,2]
coords=census_blocks_ny$geometry[[i]][[1]][[1]]
area_cbg[i]=areaPolygon(coords)
}
area_cbg=area_cbg/10^6;
n <- dim(New_York_County)[1];
dev <- c();
tot <- 0; #conterà quanti cbg della county sta trovando
settimana <- c('1mon', '2tue', '3wen', '4thu', '5fri','6sat', '7sun');
attach(census_blocks_ny)
attach(New_York_County)
dev <- c();
tot <- 0; #conterà quanti cbg della county sta trovando
settimana <- c('1mon', '2tue', '3wen', '4thu', '5fri','6sat', '7sun');
for(i in 1: n){                 #loop on CBGs
j <- match(area[i],CensusBlockGroup); #estrae gli indici delle cbg in PatternNY corrispondenti ai CBG nel dataframe census_blocks_ny
if(County[j] == "New York County"){ #list_county[l]
tot <- tot + 1;
lun <- stops_by_day[[i]][seq(1,30,7)];
mar <- stops_by_day[[i]][seq(2,30,7)];
mer <- stops_by_day[[i]][seq(3,30,7)];
gio <- stops_by_day[[i]][seq(4,30,7)];
ven <- stops_by_day[[i]][seq(5,30,7)];
sab <- stops_by_day[[i]][seq(6,30,7)];
dom <- stops_by_day[[i]][seq(7,30,7)];
dev[(tot*7 - 6): (tot*7)] <- c(mean(lun)/area_cbg[j], mean(mar)/area_cbg[j],
mean(mer)/area_cbg[j], mean(gio)/area_cbg[j],
mean(ven)/area_cbg[j], mean(sab)/area_cbg[j],
mean(dom)/area_cbg[j]);
}
count[l] <- tot;
}
for(i in 1: n){                 #loop on CBGs
j <- match(area[i],CensusBlockGroup); #estrae gli indici delle cbg in PatternNY corrispondenti ai CBG nel dataframe census_blocks_ny
if(County[j] == "New York County"){ #list_county[l]
tot <- tot + 1;
lun <- stops_by_day[[i]][seq(1,30,7)];
mar <- stops_by_day[[i]][seq(2,30,7)];
mer <- stops_by_day[[i]][seq(3,30,7)];
gio <- stops_by_day[[i]][seq(4,30,7)];
ven <- stops_by_day[[i]][seq(5,30,7)];
sab <- stops_by_day[[i]][seq(6,30,7)];
dom <- stops_by_day[[i]][seq(7,30,7)];
dev[(tot*7 - 6): (tot*7)] <- c(mean(lun)/area_cbg[j], mean(mar)/area_cbg[j],
mean(mer)/area_cbg[j], mean(gio)/area_cbg[j],
mean(ven)/area_cbg[j], mean(sab)/area_cbg[j],
mean(dom)/area_cbg[j]);
}
}
days <- rep(settimana, times = tot);
#x11()
png(file = paste(list_county[l], 'boxplot anova_days.png', sep = ""))
boxplot( dev ~ days, main = paste('boxplot GROUPS = 7 week days of County', list_county[l]))
#x11()
png(file = paste("Manhattan county", 'boxplot anova_days.png', sep = ""))
boxplot( dev ~ days, main = paste('boxplot GROUPS = 7 week days of County', list_county[l]))
dev.off()
x11()
#png(file = paste("Manhattan county", 'boxplot anova_days.png', sep = ""))
boxplot( dev ~ days, main = paste('boxplot GROUPS = 7 week days of County', Manhattan))
#png(file = paste("Manhattan county", 'boxplot anova_days.png', sep = ""))
boxplot( dev ~ days, main = paste('boxplot GROUPS = 7 week days of County', 'Manhattan'))
dev.off()
x11()
# png(file =paste(Manhattan,'barplot anova_days.png', sep = ""))
par(mfrow=c(1,2), las =2)
barplot(rep(mean(dev),7), names.arg=levels(days),
col='grey85', main=paste('Model under H0', Manhattan)) # ylim=c(0,max(dev))
barplot(rep(mean(dev),7), names.arg=levels(days),
col='grey85', main=paste('Model under H0', 'Manhattan')) # ylim=c(0,max(dev))
barplot(tapply(dev, days, mean), names.arg=levels(days),
col=coldays,main=paste('Model under H1', 'Manhattan')) #, ylim=c(0,max(dev))
coldays <- brewer.pal(n = g1, name = 'Set2');
g1 <-7
g2 <- 2;
coldays <- brewer.pal(n = g1, name = 'Set2');
colcountyNY <-brewer.pal(n = g1, name = 'Accent');
x11()
# png(file =paste(Manhattan,'barplot anova_days.png', sep = ""))
par(mfrow=c(1,2), las =2)
barplot(rep(mean(dev),7), names.arg=levels(days),
col='grey85', main=paste('Model under H0', 'Manhattan')) # ylim=c(0,max(dev))
barplot(tapply(dev, days, mean), names.arg=levels(days),
col=coldays,main=paste('Model under H1', 'Manhattan')) #, ylim=c(0,max(dev))
### verify the assumptions:
# 1) normality (univariate) in each group (7 tests)
Ps <- c(shapiro.test(dev[ days==settimana[1] ])$p,
shapiro.test(dev[ days==settimana[2] ])$p,
shapiro.test(dev[ days==settimana[3] ])$p,
shapiro.test(dev[ days==settimana[4] ])$p,
shapiro.test(dev[ days==settimana[5] ])$p,
shapiro.test(dev[ days==settimana[6] ])$p,
shapiro.test(dev[ days==settimana[7] ])$p);
Ps #NON VA PERCHÈ ABBIAMO TROPPE STAT UNITS
# 2) same covariance structure (= same sigma^2)
Var <- c(var(dev[ days==settimana[1] ]),
var(dev[ days==settimana[2] ]),
var(dev[ days==settimana[3] ]),
var(dev[ days==settimana[4] ]),
var(dev[ days==settimana[5] ]),
var(dev[ days==settimana[6] ]),
var(dev[ days==settimana[7] ]));
Var
sink(paste(list_county[l], 'output.txt')) #reindirizza i risultati, che di solito appaiono nella console, verso il file output.txt
bartlett.test(dev, days)
fit <- aov(dev ~ days)
summary(fit)
## weekend vs weekday ----------------------------------------------------------
dev <- rep(0.0, times = n*2);
group <- c('work day', 'weekend');
days <- rep(group, times = n);
for (i in 1:n){
j <- match(area[i],CensusBlockGroup);
tot = c(stops_by_day[[i]][seq(1,30,7)], stops_by_day[[i]][seq(2,30,7)],
stops_by_day[[i]][seq(3,30,7)], stops_by_day[[i]][seq(4,30,7)],
stops_by_day[[i]][seq(5,30,7)]);
dev[i] = mean(tot)/area_cbg[i];
tot <- c(stops_by_day[[i]][seq(6,30,7)], stops_by_day[[i]][seq(7,30,7)]);
dev[i+1] <- mean(tot)/area_cbg[j];
}
# x11()
png(file = "boxplot_work.png")
boxplot( dev ~ days, main = "weekend vs work days")
dev.off()
setwd("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/ANOVA/Manhattan")
x11()
#png(file = "boxplot_work.png")
boxplot( dev ~ days, main = "weekend vs work days")
dev.off()
x11()
#png(file = "boxplot_work.png")
boxplot( dev ~ days, main = "weekend vs work days")
#qua infatti le medie confrontando le densità sembrano differenti
#ma pvalue alto
x11()
#png(file = "barplot_work.png")
par(mfrow=c(1,2), las = 2)
barplot(rep(mean(dev),2), names.arg=levels(days),
las=2, col='grey85', main='Model under H0') # ylim=c(0,max(dev))
barplot(tapply(dev, days, mean), names.arg=levels(days),
las=2, col=c(coldays[4], coldays[6]),main='Model under H1') #, ylim=c(0,max(dev))
dev.off()
#plot fino ai picchi
x11()
par(mfrow=c(1,2))
barplot(rep(mean(dev),7), names.arg=levels(days),ylim=c(0,max(dev)),
las=2, col='grey85', main='Model under H0')
barplot(tapply(dev, days, mean), names.arg=levels(days),ylim=c(0,max(dev)),
las=2, col=c(coldays[4], coldays[6]), main='Model under H1')
dev.off()
Ps <- c(shapiro.test(dev[ days==group[1] ])$p,
shapiro.test(dev[ days==group[2] ])$p)
Ps
# 2) same covariance structure (= same sigma^2)
Var <- c(var(dev[ days==group[1] ]),
var(dev[ days==group[2] ]));
Var
x11()
plot(Var, ylim = c(0, max(Var)))
# test of homogeneity of variances
# H0: sigma.1 = sigma.2 = sigma.3 = sigma.4 = sigma.5 = sigma.6
# H1: there exist i,j s.t. sigma.i!=sigma.j
bartlett.test(dev, days)
fit <- aov(dev ~ days)
summary(fit)
#plot fino ai picchi
x11()
par(mfrow=c(1,2))
barplot(rep(mean(dev),7), names.arg=levels(days),ylim=c(0,max(dev)),
las=2, col='grey85', main='Model under H0')
barplot(tapply(dev, days, mean), names.arg=levels(days),ylim=c(0,max(dev)),
las=2, col=c(coldays[4], coldays[6]), main='Model under H1')
#qua infatti le medie confrontando le densità sembrano differenti
#ma pvalue alto
x11()
#png(file = "barplot_work.png")
par(mfrow=c(1,2), las = 2)
barplot(rep(mean(dev),2), names.arg=levels(days),
las=2, col='grey85', main='Model under H0') # ylim=c(0,max(dev))
barplot(tapply(dev, days, mean), names.arg=levels(days),
las=2, col=c(coldays[4], coldays[6]),main='Model under H1') #, ylim=c(0,max(dev))
plot(dev[1:2:n])
plot(dev[seq(1,n,2)])
for (i in 1:n){
j <- match(area[i],CensusBlockGroup);
tot = c(stops_by_day[[i]][seq(1,30,7)], stops_by_day[[i]][seq(2,30,7)],
stops_by_day[[i]][seq(3,30,7)], stops_by_day[[i]][seq(4,30,7)],
stops_by_day[[i]][seq(5,30,7)]);
dev[i] = mean(tot)/area_cbg[i];
tot <- c(stops_by_day[[i]][seq(6,30,7)], stops_by_day[[i]][seq(7,30,7)]);
dev[i+1] <- mean(tot)/area_cbg[j];
}
## weekend vs weekday ----------------------------------------------------------
dev <- rep(0.0, times = n*2);
group <- c('work day', 'weekend');
days <- rep(group, times = n);
for (i in 1:n){
j <- match(area[i],CensusBlockGroup);
tot = c(stops_by_day[[i]][seq(1,30,7)], stops_by_day[[i]][seq(2,30,7)],
stops_by_day[[i]][seq(3,30,7)], stops_by_day[[i]][seq(4,30,7)],
stops_by_day[[i]][seq(5,30,7)]);
dev[i] = mean(tot)/area_cbg[i];
tot <- c(stops_by_day[[i]][seq(6,30,7)], stops_by_day[[i]][seq(7,30,7)]);
dev[i+1] <- mean(tot)/area_cbg[j];
}
plot(dev[seq(1,n,2)])
plot(dev)
remove <- which(dev > 4*10^4)
plot(dev[remove], col ='red', asp=T)
plot(dev)
plot(dev[remove], col ='red', asp=1)
plot(dev)
plot(dev[remove], col ='red', par=1)
plot(dev)
plot(dev[remove], col ='red', add=1)
plot(dev)
plot(dev[remove], col ='red', add=T)
plot(dev)
points(dev[remove], col ='red', add=T)
plot(dev)
points(dev[remove], col ='red', add=T)
points(dev[remove], col ='red')
points(dev[remove], col ='red')
plot(dev)
points(dev[remove], col ='red')
plot(dev)
points(dev[remove], col ='red')
dev[remove]
remove <- which(dev > 3*10^4)
plot(dev)
points(dev[remove], col ='red')
remove <- which(dev > 3*10^3)
plot(log(dev))
Ps <- c(shapiro.test(log(dev[ days==group[1] ]))$p,
shapiro.test(log(dev[ days==group[2] ]))$p)
Ps
Ps <- c(shapiro.test(dev[ days==group[1] ])$p,
shapiro.test(dev[ days==group[2] ])$p)
log(dev[ days==group[1] ])
