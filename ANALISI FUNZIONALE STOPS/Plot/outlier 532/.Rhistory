# Loading libraries
library(car)
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
New_York_County<-New_York_County[-92,]
attach(New_York_County)
LM_1=data.frame(median_dwell,raw_stop_counts,raw_device_counts,distance_from_home,distance_from_primary_daytime_location)
detach(New_York_County)
attach(LM_1)
## vediamo come sono distribuiti i dati
pairs(LM_1) #(male)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
# mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
# summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
b=boxCox(mod)
best_lambda_ind=which.max(b$y)
lambda=b$x[best_lambda_ind]
box_cox <- function(x,lambda)
{
if(lambda!=0)
return((x^lambda-1)/lambda)
return(log(x))
}
new_raw_stop_counts = box_cox(raw_stop_counts,lambda)
new_raw_device_counts = box_cox(raw_device_counts,lambda)
new_median_dwell = box_cox(median_dwell,lambda)
mod_boxcox=lm(formula = new_median_dwell ~ new_raw_stop_counts + new_raw_device_counts)
summary(mod_boxcox) #0.38
# #-------------------------------------------------------------------------------
# #2. Proviamo a vedere se cambia qualcosa con il Powertransformation di ogni variabile (univariate)
# #--------------------------------------------------------------------------------
lambda.raw_stop <- powerTransform(raw_stop_counts)
lambda.raw_device <- powerTransform(raw_device_counts)
lambda.median <- powerTransform(median_dwell)
bc.raw_stop <- bcPower(raw_stop_counts, lambda.raw_stop$lambda)
bc.raw_device <- bcPower(raw_device_counts, lambda.raw_device$lambda)
bc.median <- bcPower(median_dwell, lambda.median$lambda)
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.475
mod_power=lm(formula = median_dwell ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.496
mod_power=lm(formula = bc.median ~ raw_stop_counts + raw_device_counts)
summary(mod_power) #0.03
mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
summary(mod_power) #0.478
# #----------------------------------------------------------------------------
# #3. Multivariate case
# #----------------------------------------------------------------------------
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[3])
mod_multivariate=lm(formula = BC.median ~ BC.stop + BC.device)
summary(mod_multivariate) #0.692
# ######################################### SECONDO MODELLO: AGGIUNGO FEATURES ##########################################
#
# #4. Provo con questo metodo ad aggiungere features
#
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.primary + BC.home)
summary(mod_multivariate_complete) #0.6932
vif(mod_multivariate_complete) # c'? collinearit?
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
shapiro.test(residuals(mod_multivariate_complete))
x11()
pairs(LM_2)
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
pairs(LM_2)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
x11()
pairs(LM_2)
plot(Bc.stop, median_dwell)
plot(BC.stop, median_dwell)
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
New_York_County_no_river= New_York_County_no_river[order( New_York_County_no_river$area),]
CBG_ny_no_river<-CBG_ny_no_river[order( CBG_ny_no_river$CensusBlockGroup),]
attach( New_York_County_no_river)
stops<-matrix(nrow = 1092, ncol=30*24)
for (i in 1:dim( New_York_County_no_river)[1]) {
stops[i,]<-stops_by_each_hour[[i]]
}
detach( New_York_County_no_river)
stops<-stops[,505:672]
stops<-t(stops)
colnames(stops)<- New_York_County_no_river$area
x11()
# outliers
out=c(92,532)
cbg_out=New_York_County_no_river[out,1]
out1 <- New_York_County_no_river[out[1],]
out2 <- New_York_County_no_river[out[2],]
library(RColorBrewer)
col = brewer.pal(n = 8, name = 'YlOrRd')
setwd("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/ANALISI FUNZIONALE STOPS/Plot/outlier 532")
x11()
png(file = 'Monday.png')
dev.off()
#anche qua che commneti boh, andamento abbastanza piÃ¹ regolare con picco sempre alla sera nel pre cena, alti flussi sempre anche mattina molto presto
library(geosphere)
library(sf)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(ggplot2)
library(raster)
library(rgdal)
