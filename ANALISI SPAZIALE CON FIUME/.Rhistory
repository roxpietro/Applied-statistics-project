# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.x, coord.y)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.x, coord.y)
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
#plot(st_geometry(data_spatial["median_dwell"]))
i_range1<-which(data_spatial$New_York_County.median_dwell<99 )
i_range2<-which(data_spatial$New_York_County.median_dwell<190 & data_spatial$New_York_County.median_dwell>=99 )
i_range3<-which(data_spatial$New_York_County.median_dwell<282 & data_spatial$New_York_County.median_dwell>=190 )
i_range4<-which(data_spatial$New_York_County.median_dwell<374 & data_spatial$New_York_County.median_dwell>=282 )
i_range5<-which(data_spatial$New_York_County.median_dwell>=374 )
library(viridis)
colors <- rainbow(5)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range4]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[4])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range5]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[5])
i_range1<-which(data_spatial$New_York_County.median_dwell<99 )
i_range2<-which(data_spatial$New_York_County.median_dwell<190 & data_spatial$New_York_County.median_dwell>=99 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=190 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
library(car)
# Loading
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
New_York_County<-New_York_County[-92,]
attach(New_York_County)
LM_1=data.frame(median_dwell,raw_stop_counts,raw_device_counts,distance_from_home,distance_from_primary_daytime_location)
detach(New_York_County)
attach(LM_1)
## vediamo come sono distribuiti i dati
pairs(LM_1) #(male)
################## PRIMO MODELLO CON 2 FEATURES ################################
# # facciamo un linear model solo con le prime due variabili (risultati molto bassi)
# mod=lm(formula = median_dwell ~ raw_stop_counts + raw_device_counts)
# summary(mod)
#
# # Dobbiamo trovare una trasformazione che renda il modello pi? lineare
#
# #-------------------------------------------------------------------------------
# #1. decidiamo di fare il boxcox del modello (univariate)
# #-------------------------------------------------------------------------------
#
# b=boxCox(mod)
# best_lambda_ind=which.max(b$y)
# lambda=b$x[best_lambda_ind]
#
# box_cox <- function(x,lambda)
# {
#   if(lambda!=0)
#     return((x^lambda-1)/lambda)
#   return(log(x))
# }
#
# new_raw_stop_counts = box_cox(raw_stop_counts,lambda)
# new_raw_device_counts = box_cox(raw_device_counts,lambda)
# new_median_dwell = box_cox(median_dwell,lambda)
#
# mod_boxcox=lm(formula = new_median_dwell ~ new_raw_stop_counts + new_raw_device_counts)
# summary(mod_boxcox) #0.38
#
# #-------------------------------------------------------------------------------
# #2. Proviamo a vedere se cambia qualcosa con il Powertransformation di ogni variabile (univariate)
# #--------------------------------------------------------------------------------
# lambda.raw_stop <- powerTransform(raw_stop_counts)
# lambda.raw_device <- powerTransform(raw_device_counts)
# lambda.median <- powerTransform(median_dwell)
#
# bc.raw_stop <- bcPower(raw_stop_counts, lambda.raw_stop$lambda)
# bc.raw_device <- bcPower(raw_device_counts, lambda.raw_device$lambda)
# bc.median <- bcPower(median_dwell, lambda.median$lambda)
#
# mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
# summary(mod_power) #0.475
#
# mod_power=lm(formula = median_dwell ~ bc.raw_stop + bc.raw_device)
# summary(mod_power) #0.496
#
# mod_power=lm(formula = bc.median ~ raw_stop_counts + raw_device_counts)
# summary(mod_power) #0.03
#
# mod_power=lm(formula = bc.median ~ bc.raw_stop + bc.raw_device)
# summary(mod_power) #0.478
#
# #----------------------------------------------------------------------------
# #3. Multivariate case
# #----------------------------------------------------------------------------
# lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,median_dwell))
# lambda_multivariate
#
# BC.stop <- bcPower(raw_stop_counts, 0)
# BC.device <- bcPower(raw_device_counts, 0)
# BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[3])
#
# mod_multivariate=lm(formula = BC.median ~ BC.stop + BC.device)
# summary(mod_multivariate) #0.692
#
# ######################################### SECONDO MODELLO: AGGIUNGO FEATURES ##########################################
#
# #4. Provo con questo metodo ad aggiungere features
#
# lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
# lambda_multivariate
#
# BC.stop <- bcPower(raw_stop_counts, 0)
# BC.device <- bcPower(raw_device_counts, 0)
# BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
# BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
# BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
#
# mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.primary + BC.home)
# summary(mod_multivariate_complete) #0.6932
#
# vif(mod_multivariate_complete) # c'è collinearità
#
# LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
# pairs(LM_2)
#
# par(mfrow=c(2,2))
# plot(mod_multivariate_complete)
#
# shapiro.test(residuals(mod_multivariate_complete))
#-------------------------------------------------------------------
# FEATURE SELECTION
#--------------------------------------------------------------------
#-------------------------------------------------------------------------
# proviamo a vedere se riusciamo a predirre nuove median_dwell con CV
#-------------------------------------------------------------------------
k <- 10
library(leaps)
set.seed(1)
folds <- sample(1:k,nrow(LM_2),replace=TRUE)
folds
table(folds)
# function that performs the prediction for regsubsets
predict.regsubsets <- function(object,newdata,id){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form,newdata)
coefi <- coef(object,id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
cv.errors <- matrix(NA,k,4, dimnames=list(NULL, paste(1:4)))
for(j in 1:k){
best.fit <- regsubsets(median_dwell~.,data=LM_2[folds!=j,],nvmax=4)
for(i in 1:4){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
root.mean.cv.errors <- sqrt(apply(cv.errors,2,mean)) # average over the columns
root.mean.cv.errors
plot(root.mean.cv.errors,type='b')
which.min(root.mean.cv.errors)
points(which.min(root.mean.cv.errors),root.mean.cv.errors[which.min(root.mean.cv.errors)], col='red',pch=19)
# estimation on the full dataset
reg.best <- regsubsets(median_dwell~.,data=LM_2, nvmax=4)
coef(reg.best,1)
#---------------------------------------------------------------------------------------
# Facciamo PCA per vedere se eliminiamo la collinearita' -> EVITIAMO
#---------------------------------------------------------------------------------------
# model.pca <- princomp(cbind(BC.home,BC.primary,BC.stop,BC.device), scores=TRUE)
# summary(model.pca)
# model.pca$load
#
# sp1.pc <- model.pca$scores[,1]
# sp2.pc <- model.pca$scores[,2]
# sp3.pc <- model.pca$scores[,3]
# sp4.pc <- model.pca$scores[,4]
# # scores are used as new betas
#
# # Now we estimate the model by inserting the PCs instead of the
# # original regressors
# # Model: y = b0 + b1*PC1+ b2*PC2 + eps, eps~N(0,sigma^2)
# fm.pc <- lm(BC.median ~ sp1.pc + sp2.pc + sp3.pc +  sp4.pc)
#
# summary(fm.pc)
#--------------------------------------------------------------------------------------------
# TRASFORMIAMO I DATI GUARDANDO LA RELAZIONE TRA MEDIAN_DWELL E LE FEATURES
#--------------------------------------------------------------------------------------------
x11()
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
lambda_multivariate <- powerTransform(cbind(count_home_areas, count_weekday_home_areas, median_dwell));
lambda_multivariate
library(geosphere)
library(sf)
library(lattice)           ## Data management
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.x, coord.y)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.x, coord.y)
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
#plot(st_geometry(data_spatial["median_dwell"]))
i_range1<-which(data_spatial$New_York_County.median_dwell<99 )
i_range2<-which(data_spatial$New_York_County.median_dwell<190 & data_spatial$New_York_County.median_dwell>=99 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=190 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
plot(data_spatial$New_York_County.median_dwell)
i_range1<-which(data_spatial$New_York_County.median_dwell<50 )
i_range2<-which(data_spatial$New_York_County.median_dwell<190 & data_spatial$New_York_County.median_dwell>=50 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=190 )
i_range1<-which(data_spatial$New_York_County.median_dwell<50 )
i_range2<-which(data_spatial$New_York_County.median_dwell<150 & data_spatial$New_York_County.median_dwell>=50 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=150 )
i_range1<-which(data_spatial$New_York_County.median_dwell<50 )
i_range2<-which(data_spatial$New_York_County.median_dwell<150 & data_spatial$New_York_County.median_dwell>=50 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=150 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
i_range1<-which(data_spatial$New_York_County.median_dwell<40 )
i_range2<-which(data_spatial$New_York_County.median_dwell<150 & data_spatial$New_York_County.median_dwell>=50 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=150 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
i_range1<-which(data_spatial$New_York_County.median_dwell<40 )
i_range2<-which(data_spatial$New_York_County.median_dwell<120 & data_spatial$New_York_County.median_dwell>=40 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=120 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
egend("topleft", c("[0,40]","[40,120]","[120,400]"))
legend("topleft", c("[0,40]","[40,120]","[120,400]"))
legend("topleft", c("[0,40]","[40,120]","[120,400]"),fill=colors)
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
legend("topleft", c("[0,40]","[40,120]","[120,400]"),fill=colors)
svgm <- variogram(New_York_County$median_dwell ~ 1, data_spatial2) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm, main = 'Sample Variogram',pch=19)
svgm <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm, main = 'Sample Variogram',pch=19)
plot(variogram(data_spatial2$New_York_County.median_dwell ~ 1, CBG_ny,alpha = c(0, 45, 90, 135)),pch=19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2)
plot(v,pch=19)
v.fit<-fit.variogram(v, vgm(1, "Sph", 800, 1))
v.fit<-fit.variogram(v, vgm(1, "Sph", 800, 1))
vgm(0.5, "Nug", 0)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2)
plot(v,pch=19)
v.fit<-fit.variogram(v, vgm(1, "Sph", 800, 1))
View(v.fit)
plot(v, v.fit, pch = 19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2)
View(v)
v.fit<-fit.variogram(v, vgm(1, "Sph", 800, 1))
library(automap)
install.packages("automap")
library(automap)
vario.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit, pch = 19)
plot(v, v.fit$var_model, pch = 19)
plot(variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha = c(0, 45, 90, 135)),pch=19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"))
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"))
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("psill"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
help(autofitVariogram)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Gau"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Gau"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Exp"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
plot(variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha = c(0, 45, 90, 135)),pch=19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=45 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=45 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
