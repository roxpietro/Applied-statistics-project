print(plot(v.dir, v.anis, pch=19))
# volendo 90 gradi è abbastanza fittato però oscilla un po' quindi non saprei
v.dir <- variogram(log(med_dwell_area) ~ sqrt(dist),data_spatial,alpha=90)
plot(v.dir)
v.anis <- fit.variogram(v.dir,vgm(0.8, "Exp", 15000, 0.7, alpha=90))
x11()
plot(v.dir, v.anis, pch = 3)
v.anis
print(plot(v.dir, v.anis, pch=19))
v.dir <- variogram(log(med_dwell_area) ~ sqrt(dist),data_spatial,alpha=(0:3)*45)
plot(v.dir)
v.anis <- vgm(1.3, "Exp", 15000, 0.5, anis=c(45, 0.3))
print(plot(v.dir, v.anis, pch=19))
# volendo 90 gradi è abbastanza fittato però oscilla un po' quindi non saprei
v.dir <- variogram(log(med_dwell_area) ~ sqrt(dist),data_spatial,alpha=90)
plot(v.dir)
v.anis <- fit.variogram(v.dir,vgm(0.8, "Exp", 15000, 0.7, alpha=90))
x11()
plot(v.dir, v.anis, pch = 3)
v.anis
# compare the two variograms
v.f.est<-function(x,C0, ...){C0-cov.spatial(x, ...)}
x11()
plot(v.log$dist,v.log$gamma,xlab='distance',ylab='semivariance',pch=19,col='red')
curve(v.f.est(x, C0=fit_log[2,2]+fit_log[1,2], cov.pars=rbind(c(fit_log[2,2], fit_log[2,3]),c(fit_log[1,2], fit_log[1,3])), cov.model = c("exponential","pure.nugget")), from = 0.0001, to = 20000,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='red',lwd=2)
points(v.dir$dist,v.dir$gamma,xlab='distance',ylab='semivariance',pch=19,col='steelblue')
curve(v.f.est(x, C0=v.anis[2,2]+v.anis[1,2],
cov.pars=rbind(c(v.anis[2,2], v.anis[2,3]),c(v.anis[1,2], v.anis[1,3])), cov.model = c("exponential","pure.nugget")), from = 0.0001, to = 20000,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='steelblue',lwd=2)
# meglio il modello con anisotropy
v.dir <- variogram(bc.med_dwell ~ sqrt(dist),data_spatial,alpha=(0:3)*45)
plot(v.dir)
v.anis <- vgm(7, "Sph", 15000, 4, anis=c(45, 0.3))
print(plot(v.dir, v.anis, pch=19))
v.dir <- variogram(bc.med_dwell ~ sqrt(dist),data_spatial,alpha=135, cutoff=20000)
plot(v.dir)
v.anis <- fit.variogram(v.dir,vgm(7, "Exp", 15000, 4, alpha=135))
x11()
plot(v.dir, v.anis, pch = 3)
v.anis
# compare the two variograms
v.f.est<-function(x,C0, ...){C0-cov.spatial(x, ...)}
x11()
plot(v.bc$dist,v.bc$gamma,xlab='distance',ylab='semivariance',pch=19,col='red')
curve(v.f.est(x, C0=fit.bc[2,2]+fit.bc[1,2], cov.pars=rbind(c(fit.bc[2,2], fit.bc[2,3]),c(fit.bc[1,2], fit.bc[1,3])), cov.model = c("exponential","pure.nugget")), from = 0.0001, to = 20000,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='red',lwd=2)
points(v.dir$dist,v.dir$gamma,xlab='distance',ylab='semivariance',pch=19,col='steelblue')
curve(v.f.est(x, C0=v.anis[2,2]+v.anis[1,2],
cov.pars=rbind(c(v.anis[2,2], v.anis[2,3]),c(v.anis[1,2], v.anis[1,3])), cov.model = c("exponential","pure.nugget")), from = 0.0001, to = 20000,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='steelblue',lwd=2)
# è uguale, c'è qualcosa che non va....
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
### guardiamo da dove arriva la gente che va lì: HOME
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Complete_dataset.RData")
rm(patterns_ny)
rm(census_metadata)
# order patterns_ny and census_block_ny by CBG of New York County
complete_dataset = complete_dataset[order(complete_dataset$area),]
census_blocks_ny = census_blocks_ny[order(census_blocks_ny$CensusBlockGroup),]
#remove not common cbg
remove <- which(census_blocks_ny$CensusBlockGroup %in% complete_dataset$area == FALSE)
census_blocks_ny <- census_blocks_ny[-remove,]
dim(census_blocks_ny)
dim(New_York_County_no_river)[1]
home <- c()
for (i in 1:dim(New_York_County_no_river)[1]){
home[i] <- names(device_home_areas[[i]])
}
home <- c()
for (i in 1:dim(New_York_County_no_river)[1]){
home[i] <- names(New_York_County_no_river$device_home_areas[[i]])
}
warnings()
i<-1
home[i] <- names(New_York_County_no_river$device_home_areas[[i]])
names(New_York_County_no_river$device_home_areas[[i]])
home <- matrix(nrow = dim(New_York_County_no_river)[1], ncols =1)
for (i in 1:dim(New_York_County_no_river)[1]){
home[i] <- names(New_York_County_no_river$device_home_areas[[i]])
}
attach(New_York_County_no_river)
dim(device_home_areas)[1]
max(dim(device_home_areas)[1])
length(device_home_areas)[1]
device_home_areas[[]]
View(CBG_ny_no_river)
View(New_York_County_no_river)
index_home <- c(c())
home <- c(c())
for (i in 1:dim(New_York_County_no_river)[1]){
home[i] <- names(New_York_County_no_river$device_home_areas[[i]])
}
i<-1
names(New_York_County_no_river$device_home_areas[[i]])
home[i] <- names(New_York_County_no_river$device_home_areas[[i]])
home <- c(c())
warnings()
home <- c(c())
for (i in 1:dim(New_York_County_no_river)[1]){
home <- c(c())
for (i in 1:dim(New_York_County_no_river)[1]){
home <-append(home, names(New_York_County_no_river$device_home_areas[[i]]));
}
home <- c(c())
for (i in 1:dim(New_York_County_no_river)[1]){
home <-append(home, names(New_York_County_no_river$device_home_areas[[i]]))
}
home[i]
home <- c(c())
outside <- c()
home <- c()
for (j in 1:dim(New_York_County_no_river)[1]){
home <- names(device_home_areas[[j]])
index_home <- c()
tot <- 0
for (i in 1: length(home[j])){
k <- which(census_blocks_ny$CensusBlockGroup ==home[i])
if (length(k) != 0){
tot <- tot+1
index_home[tot] <-k
}
}
outside[j] <- tot
}
outside
outside[92]
i<-1
j<-1
names(device_home_areas[[j]])
home <- names(device_home_areas[[j]])
tot_home <- dim(home)
tot_home <- length(home)
inside <- c()
tot_home <- c()
home <- c()
for (j in 1:dim(New_York_County_no_river)[1]){
home <- names(device_home_areas[[j]])
tot_home <- length(home)
index_home <- c()
tot <- 0
for (i in 1: length(home)){
k <- which(census_blocks_ny$CensusBlockGroup == home[i])
if (length(k) != 0){
tot <- tot+1
index_home[tot] <-k
}
}
inside[j] <- tot
}
inside <- c()
tot_home <- c()
home <- c()
for (j in 1:dim(New_York_County_no_river)[1]){
home <- names(device_home_areas[[j]])
tot_home[j] <- length(home)
index_home <- c()
tot <- 0
for (i in 1: length(home)){
k <- which(census_blocks_ny$CensusBlockGroup == home[i])
if (length(k) != 0){
tot <- tot+1
index_home[tot] <-k
}
}
inside[j] <- tot
}
inside <- c()
tot_home <- c()
home <- c()
for (j in 1:dim(New_York_County_no_river)[1]){
home <- names(device_home_areas[[j]])
tot_home[j] <- length(home)
index_home <- c()
tot <- 0
for (i in 1: length(home)){
k <- which(census_blocks_ny$CensusBlockGroup == home[i])
if (length(k) != 0){
tot <- tot+1
index_home[tot] <-k
}
}
inside[j] <- tot
}
tot_home[92]
inside[92]
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
New_York_County_no_river=New_York_County_no_river[order(New_York_County_no_river$area),]
CBG_ny_no_river=CBG_ny_no_river[order(CBG_ny_no_river$CensusBlockGroup),]
attach(New_York_County_no_river)
### guardiamo da dove arriva la gente che va lì: HOME
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Complete_dataset.RData")
rm(patterns_ny)
rm(census_metadata)
# order patterns_ny and census_block_ny by CBG of New York County
complete_dataset = complete_dataset[order(complete_dataset$area),]
census_blocks_ny = census_blocks_ny[order(census_blocks_ny$CensusBlockGroup),]
#remove not common cbg
remove <- which(census_blocks_ny$CensusBlockGroup %in% complete_dataset$area == FALSE)
census_blocks_ny <- census_blocks_ny[-remove,]
dim(census_blocks_ny)
inside <- c()
tot_home <- c()
home <- c()
for (j in 1:dim(New_York_County_no_river)[1]){
home <- names(device_home_areas[[j]])
tot_home[j] <- length(home)
index_home <- c()
tot <- 0
for (i in 1: length(home)){
k <- which(census_blocks_ny$CensusBlockGroup == home[i])
if (length(k) != 0){
tot <- tot+1
index_home[tot] <-k
}
}
inside[j] <- tot
}
plot(inside)
ouiside <- tot_home-inside
outside <- tot_home-inside
outside[92]
data <- data.frame(total_home = tot_home, home_in = inside, home_out = outside)
x11()
pairs(data)
mod <- lm(home_in ~ home_out, data)
summary(out)
summary(mod)
summary(mod$residuals)
par(mfrow = c(2,2))
x11()
par(mfrow = c(2,2))
plot(mod)
library(car)
lambda <- powerTransform(inside, outside)
lambda <- powerTransform(cbind(inside, outside))
which(inside <=0)
which(outside <=0)
lambda <- powerTransform(cbind(inside, (outside+1e-16)))
bc.inside <- bcPower(inside, lambda$lambda[1])
bc.outside <- bcPower(outside, lambda$lambda[2])
lambda
lambda$lambda
bc.inside <- bcPower(inside, lambda$lambda[1])
bc.outside <- bcPower((outside+1e-16), lambda$lambda[2])
bc.data <- data.frame(total_home = tot_home, home_in = bc.inside, home_out = bc.outside)
x11()
pairs(bc.data)
bc.mod <- lm(bc.inside ~ bc.ouside)
bc.mod <- lm(bc.inside ~ bc.outside)
summary(bc.mod)
summary(bc.mod$residuals)
shapiro.test(mod$residuals)
summary(mod)
shapiro.test(bc.mod$residuals)
x11()
par(mfrow = c(2,2))
plot(mod)
x11()
par(mfrow = c(2,2))
plot(bc.mod)
summary(bc.mod)
x11()
par(mfrow = c(2,2))
plot(mod)
#torno indietro e rimuovo outliers
rem <-(36,92)
#torno indietro e rimuovo outliers
rem <-c(36,92)
data <- data[-rem]
data <- data[-rem,]
mod <- lm(home_in ~ home_out, data)
summary(mod) #Adjusted R-squared:  0.771,  pvalue bassisimi
shapiro.test(mod$residuals) #< 2.2e-16
x11()
par(mfrow = c(2,2))
plot(mod)
rem <-c(401,532)
data <- data[-rem,]
mod <- lm(home_in ~ home_out, data)
summary(mod) #Adjusted R-squared:  0.725,  pvalue bassisimi
shapiro.test(mod$residuals) #< 2.2e-16
x11()
par(mfrow = c(2,2))
plot(mod)
View(lambda)
View(data)
data <- data.frame(total_home = tot_home, home_in = inside, home_out = outside)
pairs(data)
#torno indietro e rimuovo outliers
rem <-c(36,92,401,532)
data <- data[-rem,]
mod <- lm(home_in ~ home_out, data)
summary(mod) #Adjusted R-squared:  0.725,  pvalue bassisimi
shapiro.test(mod$residuals) #< 2.2e-16
x11()
par(mfrow = c(2,2))
plot(mod)
data <- data.frame(total_home = tot_home, home_in = inside, home_out = outside)
boxplot(data)
x11()
boxplot(data)
hist(inside)
hist(outside)
inout <- data.frame(home_in = inside, home_out = outside)
mod <- lm(home_in ~ home_out, inout)
summary(mod) #Adjusted R-squared:  0.771,  pvalue bassisimi
shapiro.test(mod$residuals) #< 2.2e-16
#rimuovo i veri outliers ...
M <- colMeans(inout)
S <- cov(stiff)
S <- cov(inout)
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside',col='white',xlim=c(-1000,8000))
outside
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside',col='white',xlim=c(-1000,8000))
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside',col='white')
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside')
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside')
text(outside, inside, dimnames(inout)[[1]],cex=1)
abline(h=3000)
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside')
text(outside, inside, dimnames(inout)[[1]],cex=1)
abline(h=1100)
x11()
plot(X[which(inside<1100)], inside[which(inside<1100)], main='Scatterplot brain weight vs body weight', lwd=2,
xlab='Body weight', ylab='Brain weight',col='white')
plot(outside[which(inside<1100)], inside[which(inside<1100)], main='Scatterplot brain weight vs body weight', lwd=2,
xlab='Body weight', ylab='Brain weight',col='white')
plot(outside[which(inside<1100)], inside[which(inside<1100)], main='Scatterplot brain weight vs body weight', lwd=2,
xlab='Body weight', ylab='Brain weight')
x11()
plot(outside[which(inside<1100)], inside[which(inside<1100)], main='Scatterplot brain weight vs body weight', lwd=2,
xlab='Body weight', ylab='Brain weight')
#rimuovo i veri outliers ...
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside')
text(outside, inside, dimnames(inout)[[1]],cex=1)
abline(h=1100)
abline(v=300)
x11()
plot(outside[which(inside<1100 & outside<300)], inside[which(inside<1100 & outside<300)], main='Scatterplot brain weight vs body weight', lwd=2,
xlab='Body weight', ylab='Brain weight')
remove <- which(inside<1100 & outside<300)
remove
remove <- which(inside>1100 & outside>300)
remove
remove <- which(inside>=1100 & outside>=300)
remove
remove <- which(inside>=1100 || outside>=300)
remove
remove <- which(inside>=1100 || outside>=300)
remove <- which(inside<1100 || outside>=300)
remove
ouside[remove]
inside[remove]
outside[remove]
remove <- which(inside>=1100 | outside>=300)
remove
inside[remove]
outside[remove]
col = rep('black',1092)
col[remove] = 'red'
x11()
plot(outside, inside, main='Scatterplot outside vs inside NY state', lwd=2,
xlab='outside', ylab='inside', col = col)
text(outside, inside, dimnames(inout)[[1]],cex=1)
new_inside <- inside[-remove]
new_outside <- outside[-remove]
new_mod <- lm(new_inside ~ new_outside)
summary(new_mod) #Adjusted R-squared:  0.729,  pvalue bassisimi
shapiro.test(new_mod$residuals) #< 2.2e-16
x11()
par(mfrow = c(2,2))
plot(mod)
x11()
par(mfrow = c(2,2))
plot(new_mod)
x11()
par(mfrow = c(2,2))
plot(new_mod)
hist(new_inside)
x11()
hist(new_inside)
hist(new_outside)
lambda <- powerTransform(cbind(new_inside, (new_outside+1e-16)))
which(new <=0) #743 1079
which(new_outside <=0) #743 1079
lambda$lambda
bc.inside <- bcPower(new_inside, lambda$lambda[1])
bc.outside <- bcPower((new_outside+1e-16), lambda$lambda[2])
x11()
hist(bc.inside)
hist(bc.outside)
bc.mod_new <- lm(bc.inside~bc.outside)
summary(bc.mod_new)
shapiro.test(bc.mod)
shapiro.test(bc.mod_new$residuals)
plot(bc.inside, bc.outside)
library(geosphere)
library(sf)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(ggplot2)
library(raster)
library(rgdal)
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/NYC_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/CBG_NY_no_river.RData")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/River_Dataset.RData")
#coordinate in utm
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x_long <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y_lat <- coord_NY[seq(2,length(coord_NY),by=2)]
coord<-SpatialPoints(cbind(coord.x_long,coord.y_lat),proj4string=CRS("+proj=longlat"))
coord.UTM.NY <- spTransform(coord, CRS("+proj=utm +zone=18 +datum=WGS84"))
coord.x <- coord.UTM.NY@coords[,1]
coord.y <- coord.UTM.NY@coords[,2]
rem_out <- which(outside>=300)
rem_in <- which(inside>=1100)
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
#png(file = "glop distance from home.png")
ggplot() +
eom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=outside))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-rem], aes(fill=outside))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
dev.off()
last_error()
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove], aes(fill=outside[-remove]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
min(outside[-remove])
max(outside[-remove])
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove], aes(fill=outside[-remove]))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
#geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
outside[-remove]
obj <-outside[-remove]
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove], aes(fill=obj))+scale_fill_gradient(low="lightyellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
#geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
dev.off()
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove], aes(fill=obj))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
#geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="red")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
x11()
#png(file = "glop distance from home.png")
ggplot() +
geom_sf(data = CBG_ny_no_river$geometry[-remove], aes(fill=obj))+scale_fill_gradient(low="yellow", high="red") +
geom_sf(data = CBG_ny_no_river$geometry[-remove]) +
geom_sf(data = CBG_ny_no_river$geometry[remove,], fill="violet")+
geom_sf(data = CBG_RIVER$geometry, fill="lightblue")
