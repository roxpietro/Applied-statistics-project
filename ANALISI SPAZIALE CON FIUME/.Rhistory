index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
coord<-SpatialPoints(cbind(coord.x,coord.y),proj4string=CRS("+proj=longlat"))
coord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.UTM)
coordinates(data_spatial2) <- c('coord.x','coord.y')
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
spplot(data_spatial2,'New_York_County.median_dwell')
median_dwell <-data_spatial2$New_York_County.median_dwell
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
attach(New_York_County)
View(CBG_ny)
data_spatial <-data.frame(coord.x, coord.y, CBG_ny, median_dwell)
View(data_spatial)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
hist(log(median_dwell),breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
ids <- spplot(median_dwell, "zinc", identify = TRUE)
ids <- spplot(data_spatial, "zinc", identify = TRUE)
data("meuse")
is(meuse)
is(data_spatial)
is(median_dwell)
detach(New_York_County)
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ 1, data_spatial) #response variable ~ 1 #stationary dataset
library(geosphere)
library(sf)
library(lattice)           ## Data management
library(rgdal)
library(ggplot2)
library(sp)           ## Data management
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ 1, data_spatial) #response variable ~ 1 #stationary dataset
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ 1, data_spatial) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm1, main = 'Sample Variogram',pch=19)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
attach(New_York_County)
function (data = NULL, mapping = aes(), ..., environment = parent.frame())
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue") +
geom_sf(data = CBG_RIVER$geometry, col = "lightblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="darkred") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="darkred") +
geom_sf(data = CBG_RIVER$geometry, fill = "aliceblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="darkred") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="deeppink3") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
xyplot(median_dwell ~ 1, as.data.frame(data_spatial))
xyplot(median_dwell, as.data.frame(data_spatial))
gdis <- pointDistance(centroids, lonlat=TRUE)
library(raster)
gdis <- pointDistance(centroids, lonlat=TRUE)
gdis <- pointDistance(as.numeric(centroids), lonlat=TRUE)
gdis <- pointDistance(rbind(coord.x, coord.y), lonlat=TRUE)
gdis <- pointDistance(cbind(coord.x, coord.y), lonlat=TRUE)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = TRUE)
library(geosphere)
library(sp)
library(lattice)           ## Data management
library(ggplot2)
library(raster)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
plot(st_geometry(CBG_ny_no_river$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
x11()
plot(st_geometry(CBG_ny_no_river$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
dist(CBG_ny_no_river[1])
CBG_ny_no_river[1]
CBG_ny_no_river[1][1]
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord <- as.numeric(unlist(centroids_NY))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord <- as.numeric(unlist(centroids_river))
coord_riv.x <- coord[seq(1,length(coord),by=2)]
coord_riv.y <- coord[seq(2,length(coord),by=2)]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord <- as.numeric(unlist(centroids_river))
coord_riv.x <- coord[seq(1,length(coord),by=2)]
coord_riv.y <- coord[seq(2,length(coord),by=2)]
attach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(New_York_County)
require(FNN)
g = get.knnx(centroids_NY, centroids_river,k=1)
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y <- coord_NY[seq(2,length(coord_NY),by=2)]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y <- coord_river[seq(2,length(coord_river),by=2)]
require(FNN)
g = get.knnx(centroids_NY, centroids_river,k=1)
g = get.knnx(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y),k=1)
str(g)
g
g$nn.dist
g = get.knnx(cbind(coord_riv.x, coord_riv.y), cbind(coord.x, coord.y),k=1)
str(g)
dist = get.knnx(cbind(coord_riv.x, coord_riv.y), cbind(coord.x, coord.y),k=1)
attach(New_York_County)
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
New_York_County<-New_York_County[-index_river,]
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
attach(New_York_County)
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ dist, data_spatial) #response variable ~ 1 #stationary dataset
View(data_spatial)
View(data_spatial)
g = get.knnx(cbind(coord_riv.x, coord_riv.y), cbind(coord.x, coord.y),k=1)
dist<-g[2]
dist
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ dist, data_spatial) #response variable ~ 1 #stationary dataset
View(data_spatial)
View(data_spatial)
dist<-g[2]
is(dist)
dist<-as.numeric(g[2])
dist
head(dist)
###################################
### SPATIAL ANALYSIS WITH RIVER ###
###################################
library(geosphere)
library(sp)
library(lattice)           ## Data management
library(ggplot2)
library(raster)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
#centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
# TROVIAMO I CBG DEI FIUMI
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
# x11()
# plot(st_geometry(CBG_ny_no_river$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
# par(new=T)
# plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
# par(new=T)
# plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y <- coord_NY[seq(2,length(coord_NY),by=2)]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y <- coord_river[seq(2,length(coord_river),by=2)]
require(FNN)
g = get.knnx(cbind(coord_riv.x, coord_riv.y), cbind(coord.x, coord.y),k=1)
dist<-g[2]
New_York_County<-New_York_County[-index_river,]
attach(New_York_County)
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
head(data_spatial)
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ nn.dist, data_spatial) #response variable ~ 1 #stationary dataset
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="black") +
geom_sf(data = CBG_RIVER$geometry, fill = "lightblue")
detach(New_York_County)
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ nn.dist, data_spatial) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm1, main = 'Sample Variogram',pch=19)
data_spatial$nn.dist
dist=distm(c(coord.x, coord.y), c(coord_riv.x, coord_riv.y), fun = distHaversine)
dist=distm(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
dist
data_spatial <-data.frame(coord.x, coord.y, dist, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
distance=distm(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
data_spatial <-data.frame(coord.x, coord.y, distance, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data))
distance
is(distance)
View(distance)
help(geodist)
library(CRAN)
geodist(x.coord, y.coord)
install.packages("CRAN")
install.packages("gmt")
library(gmt)
distance=geodist(coord.y, coord.x, coord_riv.y, coord_riv.x units = "km")
distance=geodist(coord.y, coord.x, coord_riv.y, coord_riv.x, units = "km")
distance=geodist(coord.y, coord.x, coord_riv.y, coord_riv.x, units = "km", sequential = TRUE))
distance=geodist(coord.y, coord.x, coord_riv.y, coord_riv.x, units = "km", sequential = TRUE)
distance=geodist(coord.y, coord.x, coord_riv.y, coord_riv.x,sequential = TRUE)
distance=geodist(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
distm
distance=distm(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
is(distance)
dist=distm(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
which.min(dist[1,])
distance<-c()
for (i in 1:1092)
distance[i]<-which.min(dist[i,])
distance
data_spatial <-data.frame(coord.x, coord.y, distance, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data))
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data))
###################################
### SPATIAL ANALYSIS WITH RIVER ###
###################################
library(geosphere)
library(sp)
library(lattice)           ## Data management
library(ggplot2)
library(raster)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
#centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
# TROVIAMO I CBG DEI FIUMI
track_code_river <- c("027500", "025500", "024700", "024100", "023700", "023300", "022900", "022500", "022301", "021900","021100","020500", "019900", "019500",
"019100", "018700", "018300", "017900", "017500", "017100","016700", "016300", "015900", "015500", "015100", "013500", "012900", "011700", "009900", "007900", "007500", "006900", "003700",
"003900", "031703", "031704","031900", "000500", "000900","000700", "001502", "001501", "002500", "000800","000600","000201", "000202", "001001", "001002", "002000", "002400", "004400",
"006000", "006200", "008601", "008602", "023801", "010601","010602","011600", "012400", "013200", "013600", "023802", "015200","017800", "019200", "024200", "021000", "023600", "024302", "031100",
"029900", "029700", "028700", "022302", "016200", "024000")
index_river=c()
k=1
for (i in 1:dim(CBG_ny)[1]) {
if (CBG_ny$TractCode[i] %in% track_code_river ) {
if (CBG_ny$BlockGroup[i] == "0") {
index_river[k] = i
k=k+1
}
}
}
CBG_ny_no_river<-CBG_ny[-index_river,]
# x11()
# plot(st_geometry(CBG_ny_no_river$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
# par(new=T)
# plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
# par(new=T)
# plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
centroids_NY <- st_centroid(CBG_ny_no_river$geometry, of_largest_polygon = FALSE)
coord_NY <- as.numeric(unlist(centroids_NY))
coord.x <- coord_NY[seq(1,length(coord_NY),by=2)]
coord.y <- coord_NY[seq(2,length(coord_NY),by=2)]
centroids_river <- st_centroid(CBG_RIVER$geometry, of_largest_polygon = FALSE)
coord_river <- as.numeric(unlist(centroids_river))
coord_riv.x <- coord_river[seq(1,length(coord_river),by=2)]
coord_riv.y <- coord_river[seq(2,length(coord_river),by=2)]
dist=distm(cbind(coord.x, coord.y), cbind(coord_riv.x, coord_riv.y), fun = distHaversine)
distance<-c()
for (i in 1:1092)
distance[i]<-which.min(dist[i,])
New_York_County<-New_York_County[-index_river,]
attach(New_York_County)
data_spatial <-data.frame(coord.x, coord.y, distance, CBG_ny_no_river, median_dwell)
coordinates(data_spatial) <- c('coord.x','coord.y')
hist(median_dwell,breaks=16, col="grey", main='Histogram', prob = TRUE) #asymmetric data
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data))
xyplot(median_dwell ~ sqrt(distance), as.data.frame(data_spatial))
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ nn.dist, data_spatial) #response variable ~ 1 #stationary dataset
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ distance, data_spatial) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm1, main = 'Sample Variogram',pch=19)
distance
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ distance, data_spatial) #response variable ~ 1 #stationary dataset
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ 1, data_spatial) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm1, main = 'Sample Variogram',pch=19)
#STATIONARY MODEL
# sample variogram (binned estimator)
svgm1 <- variogram(median_dwell ~ distance, data_spatial) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm1, main = 'Sample Variogram',pch=19)
