model = c("Exp"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=0 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
plot(variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha = c(0, 45, 90, 135)),pch=19)
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=45 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=45 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y') #SET COORDINATES
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
dev.off()
# river meuse
data(meuse.riv)
View(meuse.riv)
View(meuse)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
View(meuse.sr)
View(meuse.riv)
View(meuse.lst)
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
###################################
### SPATIAL ANALYSIS WITH RIVER ###
###################################
library(geosphere)
library(sf)
library(lattice)           ## Data management
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.x, coord.y)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.x, coord.y)
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
#plot(st_geometry(data_spatial["median_dwell"]))
i_range1<-which(data_spatial$New_York_County.median_dwell<40 )
i_range2<-which(data_spatial$New_York_County.median_dwell<120 & data_spatial$New_York_County.median_dwell>=40 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=120 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
legend("topleft", c("[0,40]","[40,120]","[120,400]"),fill=colors)
x11()
bubble(data_spatial, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
x11()
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
#plot(st_geometry(data_spatial["median_dwell"]))
image(data_spatial2, col = "lightgrey")
View(meuse.grid)
coordinates(data_spatial2) <- c('coord.x','coord.y')
data(data_spatial2)
is(meuse.grid)
data_spatial2 <- as(data_spatial2, 'SpatialPixelsDataFrame')
data_spatial2 <- as(data_spatial2, 'SpatialPixelsDataFrame')
data_spatial2 <- as(data_spatial2, 'SpatialPixelsDataFrame')
View(data_spatial2)
points <- SpatialPoints(data_spatial2[,c('coord.x','coord.y')], data_spatial2[,c('New_York_County.median_dwell')])
points <- SpatialPoints(data_spatial[,c('coord.x','coord.y')], data_spatial[,c('New_York_County.median_dwell')])
data_spatial<-data.frame(New_York_County$median_dwell, coord.x, coord.y)
points <- SpatialPoints(data_spatial[,c('coord.x','coord.y')], data_spatial[,c('New_York_County.median_dwell')])
data_spatial<-data.frame(New_York_County$median_dwell, coord.x, coord.y)
points <- SpatialPoints(data_spatial[,c('coord.x','coord.y')], data_spatial[,c('New_York_County.median_dwell')])
data_spatial2 <- as(data_spatial2, 'SpatialPixelsDataFrame')
View(data_spatial2)
fullgrid(data_spatial2)=TRUE
# histogram of zinc variable
hist(meuse$zinc, breaks=16, col="grey", main='Histogram of Zn', prob = TRUE, xlab = 'Zn') #asymmetric data
# highly skewed, transform to the log
hist(log(meuse$zinc), breaks=16, col="grey", main='Histogram of log(Zn)', prob = TRUE, xlab = 'log(Zn)')
# scatterplot of log(zinc) with respect to distance from the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
hist(data_spatial2$New_York_County.median_dwell,breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
hist(log(data_spatial2$New_York_County.median_dwell),breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
hist(exp(data_spatial2$New_York_County.median_dwell),breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
log
hist(log(data_spatial2$New_York_County.median_dwell),breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
# highly skewed, transform to the log
hist(log(meuse$zinc), breaks=16, col="grey", main='Histogram of log(Zn)', prob = TRUE, xlab = 'log(Zn)')
hist(data_spatial2$New_York_County.median_dwell,breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE) #asymmetric data
hist(log2(data_spatial2$New_York_County.median_dwell),breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
hist(log(data_spatial2$New_York_County.median_dwell),breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
cord.UTM <- spTransform(centroids, CRS("+init=epsg:32748"))
cord.UTM <- spTransform(CBG_ny$geometry, CRS("+init=epsg:32748"))
cord.dec = SpatialPoints(cbind(coord.x -coord.y), proj4string = CRS("+proj=longlat"))
cord.dec = SpatialPoints(cbind(coord.x, -coord.y), proj4string = CRS("+proj=longlat"))
cord.UTM <- spTransform(cord.dec, CRS("+init=epsg:32748"))
library(rgdal)
install.packages("rgdal")
library(rgdal)
cord.UTM <- spTransform(cord.dec, CRS("+init=epsg:32748"))
cord.dec = SpatialPoints(cbind(coord.x, -coord.y), proj4string = CRS("+proj=longlat"))
cord.UTM <- spTransform(cord.dec, CRS("+init=epsg:32748"))
coord.UTM
cord.UTM
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, cord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, cord.UTM)
head(cord.UTM)
head(data_spatial2)
data_spatial2 <-data.frame(New_York_County$median_dwell, "coord"=cord.UTM)
head(data_spatial2)
cord.dec = SpatialPoints(centroids, proj4string = CRS("+proj=longlat"))
cord.dec = SpatialPoints(centroids)
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, cord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, "coord"=cord.UTM)
coordinates(data_spatial2) <- c('coord.x','coord.y')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
cord.dec = SpatialPoints(cbind(coord.x, -coord.y), proj4string = CRS("+proj=longlat"))
cord.UTM <- spTransform(cord.dec, CRS("+init=epsg:32748"))
cord.UTM
colnames(cord.UTM)<-c("coord.x","coord.y")
cord.UTM[1]
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.x,coord.y)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.x,coord.y)
coordinates(data_spatial2) <- c('coord.x','coord.y')
help(spTransform)
spTransform(c(coord),CRS("+proj=longlat"))
coord
spTransform(c(coord.x,coord.y),CRS("+proj=longlat"))
c(coord.x,coord.y)
cbind(coord.x,coord.y)
cord.UTM <- spTransform(cbind(coord.x,coord.y), CRS("+init=epsg:32748"))
help("spTransform")
is(cbind(coord.x,coord.y))
coordinates(data_spatial2) <- c('coord.x','coord.y')
cord.UTM <- spTransform(data_spatial2, CRS("+init=epsg:32748"))
cord.UTM <- spTransform(coordinates(data_spatial2), CRS("+init=epsg:32748"))
View(data_spatial2)
data_spatial2.coords
data_spatial2$coords
a<-as(coord,"SpatialPointsDataFrame")
a<-as(coord,"SpatialPoints")
a<-SpatialPoints(cbind(coord.x,coord.y))
coord<-SpatialPoints(cbind(coord.x,coord.y))
View(coord)
coord<-spTransform(coord, CRS('+proj=utm +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84:0,0,0'))
cord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
coord<-SpatialPoints(cbind(coord.x,coord.y))
cord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
coord<-SpatialPoints(cbind(coord.x,coord.y))
coord<-SpatialPoints(cbind(coord.x,coord.y),proj4string=CRS("+proj=longlat"))
cord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
cord.UTM
coord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.UTM)
head(data_spatial2)
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
i_range1<-which(data_spatial$New_York_County.median_dwell<40 )
i_range2<-which(data_spatial$New_York_County.median_dwell<120 & data_spatial$New_York_County.median_dwell>=40 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=120 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
legend("topleft", c("[0,40]","[40,120]","[120,400]"),fill=colors)
hist(data_spatial2$New_York_County.median_dwell,breaks=16, col="grey", main='Histogram of median dwell', prob = TRUE) #asymmetric data
i_range1<-which(data_spatial$New_York_County.median_dwell<40 )
i_range2<-which(data_spatial$New_York_County.median_dwell<120 & data_spatial$New_York_County.median_dwell>=40 )
i_range3<-which(data_spatial$New_York_County.median_dwell>=120 )
library(viridis)
colors <- rainbow(3)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range1]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[1])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range2]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[2])
par(new=T)
plot(st_geometry(CBG_ny$geometry[i_range3]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", col=colors[3])
legend("topleft", c("[0,40]","[40,120]","[120,400]"),fill=colors)
library(automap)
svgm <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2) #response variable ~ 1 #stationary dataset
# Zs = ms + delta_s
# sum_l a_l*f_l(s) + delta_s amd with 1 we say "take only f_0(s)"
plot(svgm, main = 'Sample Variogram',pch=19)
plot(variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha = c(0, 45, 90, 135)),pch=19)
# Fit
v <- variogram(data_spatial2$New_York_County.median_dwell ~ 1, data_spatial2,alpha=45 )
plot(v,pch=19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
plot(v, v.fit$var_model, pch = 19)
library(rgdal)
help(autofitVariogram)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Sph"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
# da modificare per trovare il modello migliore
plot(v, v.fit$var_model, pch = 19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Exp"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
# da modificare per trovare il modello migliore
plot(v, v.fit$var_model, pch = 19)
v.fit = autofitVariogram(data_spatial2$New_York_County.median_dwell~1,
data_spatial2,
model = c("Ste"),
kappa = c(0.05, seq(0.2, 2, 0.1), 5, 10),
fix.values = c(NA, NA, NA),
start_vals = c(NA,NA,NA),
verbose = T)
# da modificare per trovare il modello migliore
plot(v, v.fit$var_model, pch = 19)
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=FALSE,key.space='bottom')
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
View(data_spatial2)
head(data_spatial2)
coordinates(data_spatial2) <- coord.UTM
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
coord<-SpatialPoints(cbind(coord.x,coord.y),proj4string=CRS("+proj=longlat"))
coord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.UTM)
coordinates(data_spatial2) <- coord.UTM
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom',col = rainbow(5))
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom',col = rainbow(1:5))
plot(st_geometry(data_spatial["median_dwell"]))
plot(st_geometry(data_spatial['New_York_County.median_dwell']))
plot(st_geometry(data_spatial2['New_York_County.median_dwell']))
plot(data_spatial2['New_York_County.median_dwell'])
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
plot(data_spatial2)
plot3d(data_spatial2)
3dplot(data_spatial2)
spplot(data_spatial2,'New_York_County.median_dwell')
g<-ggplot(data_spatial) +
geom_sf(aes(fill=New_York_County.median_dwell))
g
library(ggplot2)
g<-ggplot(data_spatial) +
geom_sf(aes(fill=New_York_County.median_dwell))
g
is(data_spatial)
is(data_spatial$geometry)
plot(data_spatial['New_York_County.median_dwell'])
plot(data_spatial["New_York_County.median_dwell"])
data_spatial["New_York_County.median_dwell"]
plot(data_spatial2["New_York_County.median_dwell"])
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = New_York_County.median_dwell)) +
scale_y_continuous(breaks = 34:36)
head(data_spatial)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = "New_York_County.median_dwell")) +
scale_y_continuous(breaks = 34:36)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = "New_York_County.median_dwell"))
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = "New_York_County.median_dwell",palette = sf.colors(5)))
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = "New_York_County.median_dwell",palette = sf.colors(1168)))
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = "New_York_County.median_dwell")) + scale_y_continuous(breaks = 1:1168)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = New_York_County.median_dwell)) + scale_y_continuous(breaks = 1:1168)
median_dwell <-data_spatial2$New_York_County.median_dwell
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell)) + scale_y_continuous(breaks = 1:1168)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell)) + scale_y_continuous(breaks = 20:50)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell)) + scale_y_continuous(breaks = waiver())
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell)) + scale_y_continuous(breaks = 1:50)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell)) + scale_y_continuous(breaks = 1:10000)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell))
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell))scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill = median_dwell))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(qsec = median_dwell))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(color=qsec))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(color=median_dwell))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(color=median_dwell))+scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightblue", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="white", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightgreen", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightgray", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightgray", high="darkred")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightblue", high="darkred")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="darkred")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="darkpurple")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="purple4")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="red")
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
#------------------------------------------------------------------------------------------------------------------------------------
# ALL STATE of NY
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Complete_dataset.RData")
the State of NY")
ggplot() +
geom_sf(data = complete_dataset$geometry, aes(fill=complete_dataset$median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
median_dwell2<-complete_dataset$median_dwell
ggplot() +
geom_sf(data = complete_dataset$geometry, aes(fill=median_dwell2))+scale_fill_gradient(low="lightblue", high="red")
rm(median_dwell2)
rm(complete_dataset)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
###################################
### SPATIAL ANALYSIS WITH RIVER ###
###################################
library(geosphere)
library(sf)
library(lattice)           ## Data management
library(rgdal)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/River_Dataset.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
rm (patterns_ny)
rm (census_blocks_ny)
rm(census_metadata)
#------------------------------------------------------------
# Save centroid coordinates of each CBG
centroids <- st_centroid(CBG_ny$geometry, of_largest_polygon = FALSE)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_RIVER$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "lightblue")
par(new=T)
plot(centroids, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ", pch='.')
coord <- as.numeric(unlist(centroids))
coord.x <- coord[seq(1,length(coord),by=2)]
coord.y <- coord[seq(2,length(coord),by=2)]
coord<-SpatialPoints(cbind(coord.x,coord.y),proj4string=CRS("+proj=longlat"))
coord.UTM <- spTransform(coord, CRS("+init=epsg:32748"))
data_spatial <-data.frame(CBG_ny, New_York_County$median_dwell, coord.UTM)
data_spatial2 <-data.frame(New_York_County$median_dwell, coord.UTM)
coordinates(data_spatial2) <- c('coord.x','coord.y')
x11()
bubble(data_spatial2, 'New_York_County.median_dwell', do.log=TRUE,key.space='bottom')
spplot(data_spatial2,'New_York_County.median_dwell')
median_dwell <-data_spatial2$New_York_County.median_dwell
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
library(ggplot2)
ggplot() +
geom_sf(data = data_spatial$geometry, aes(fill=median_dwell))+scale_fill_gradient(low="lightyellow", high="blue")
