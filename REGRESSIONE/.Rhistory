lambda=b$x[best_lambda_ind]
box_cox <- function(x,lambda)
{
if(lambda!=0)
return((x^lambda-1)/lambda)
return(log(x))
}
new_raw_stop_counts = box_cox(raw_stop_counts,lambda)
new_raw_device_counts = box_cox(raw_device_counts,lambda)
new_median_dwell = box_cox(median_dwell,lambda)
# Loading libraries
library(car)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
New_York_County<-New_York_County[-92,]
attach(New_York_County)
LM_1=data.frame(median_dwell,raw_stop_counts,raw_device_counts,distance_from_home,distance_from_primary_daytime_location)
detach(New_York_County)
attach(LM_1)
## vediamo come sono distribuiti i dati
pairs(LM_1) #(male)
#----------------------------------------------------------------------------
#3. Multivariate case
#----------------------------------------------------------------------------
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[3])
mod_multivariate=lm(formula = BC.median ~ BC.stop + BC.device)
summary(mod_multivariate) #0.692
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.home + BC.primary)
summary(mod_multivariate_complete) #0.6932
vif(mod_multivariate_complete)
par(mfrow=c(2,2))
plot(mod_multivariate_complete)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,BC.median )
pairs(LM_2)
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
pairs(LM_2)
par(mfrow=c(2,2))
mod_multivariate_complete=lm(formula = BC.median ~BC.device + BC.home)
summary(mod_multivariate_complete)
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.home + BC.primary)
summary(mod_multivariate_complete) #0.6932
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device  + BC.primary)
summary(mod_multivariate_complete) #0.6932
model.pca <- princomp(cbind(BC.stop,BC.device,BC.home,BC.primary), scores=TRUE)
summary(model.pca)
model.pca$load
sp1.pc <- model.pca$scores[,1]
sp2.pc <- model.pca$scores[,2]
sp3.pc <- model.pca$scores[,3]
sp4.pc <- model.pca$scores[,4]
# Now we estimate the model by inserting the PCs instead of the
# original regressors
# Model: y = b0 + b1*PC1+ b2*PC2 + eps, eps~N(0,sigma^2)
fm.pc <- lm(BC.median ~ sp4.pc)
summary(fm.pc)
mod_multivariate_complete=lm(formula = median_dwell ~ BC.stop + BC.device  + BC.primary)
summary(mod_multivariate_complete) #0.6932
model.pca <- princomp(cbind(BC.home,BC.primary,BC.stop,BC.device), scores=TRUE)
summary(model.pca)
model.pca$load
source('C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/REGRESSIONE/linear models.R')
plot(raw_stop_counts, median_dwell)
plot(raw_device_counts, median_dwell)
plot(distance_from_home, median_dwell)
plot(distance_from_primary_daytime_location, median_dwell)
plot(raw_stop_counts, median_dwell, xlim = c(0,50000))
plot(raw_device_counts, median_dwell, xlim = c(0,50000))
plot(distance_from_home, median_dwell, xlim = c(0,50000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,50000))
plot(raw_stop_counts, median_dwell, xlim = c(0,20000))
plot(raw_device_counts, median_dwell, xlim = c(0,10000))
plot(distance_from_home, median_dwell, xlim = c(0,20000))
plot(distance_from_primary_daytime_location, median_dwell, xlim = c(0,20000))
k <- 100
set.seed(1)
folds <- sample(1:k,nrow(LM_1),replace=TRUE)
folds
table(folds)
predict.regsubsets <- function(object,newdata,id){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form,newdata)
coefi <- coef(object,id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
help(regsubsets)
###  Subset Selection Methods
library(leaps)
install.packages(leap)
install.packages(leaps)
install.packages("leaps")
help(regsubsets)
help(regsubsets) # model selection with different options
###  Subset Selection Methods
library(leaps)
help(regsubsets) # model selection with different options
cv.errors <- matrix(NA,k,50, dimnames=list(NULL, paste(1:50)))
for(j in 1:k){
best.fit <- regsubsets(BC.median~.,data=LM_1[folds!=j,],nvmax=19)
for(i in 1:50){
pred <- predict(best.fit,LM_1[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_1$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
cv.errors <- matrix(NA,k,50, dimnames=list(NULL, paste(1:50)))
for(j in 1:k){
best.fit <- regsubsets(BC.median~.,data=LM_1[folds!=j,],nvmax=50)
for(i in 1:50){
pred <- predict(best.fit,LM_1[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_1$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
folds
range(folds)
LM_1[folds!=1,]
best.fit <- regsubsets(BC.median~.,data=LM_1[folds!=j,],nvmax=50)
best.fit <- regsubsets(LM_1~.,data=LM_1[folds!=j,],nvmax=50)
cv.errors <- matrix(NA,k,50, dimnames=list(NULL, paste(1:50)))
for(j in 1:k){
best.fit <- regsubsets(BC.median~.,data=LM_2[folds!=j,],nvmax=50)
for(i in 1:50){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
set.seed(1)
folds <- sample(1:k,nrow(LM_2),replace=TRUE)
folds
table(folds)
# function that performs the prediction for regsubsets
predict.regsubsets <- function(object,newdata,id){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form,newdata)
coefi <- coef(object,id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
cv.errors <- matrix(NA,k,50, dimnames=list(NULL, paste(1:50)))
for(j in 1:k){
best.fit <- regsubsets(BC.median~.,data=LM_2[folds!=j,],nvmax=50)
for(i in 1:50){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
LM_2
cv.errors <- matrix(NA,k,19, dimnames=list(NULL, paste(1:19)))
for(j in 1:k){
best.fit <- regsubsets(median_dwell~.,data=LM_2[folds!=j,],nvmax=19)
for(i in 1:19){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
cv.errors <- matrix(NA,k,4, dimnames=list(NULL, paste(1:4)))
for(j in 1:k){
best.fit <- regsubsets(median_dwell~.,data=LM_2[folds!=j,],nvmax=4)
for(i in 1:4){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
cv.errors <- matrix(NA,k,4, dimnames=list(NULL, paste(1:4)))
for(j in 1:k){
best.fit <- regsubsets(median_dwell~.,data=LM_2[folds!=j,],nvmax=4)
for(i in 1:4){
pred <- predict(best.fit,LM_2[folds==j,],id=i)
cv.errors[j,i] <- mean( (LM_2$median_dwell[folds==j]-pred)^2 )
}
}
cv.errors
root.mean.cv.errors <- sqrt(apply(cv.errors,2,mean)) # average over the columns
root.mean.cv.errors
plot(root.mean.cv.errors,type='b')
which.min(root.mean.cv.errors)
points(which.min(root.mean.cv.errors),root.mean.cv.errors[which.min(root.mean.cv.errors)], col='red',pch=19)
# estimation on the full dataset
reg.best <- regsubsets(Salary~.,data=Hitters, nvmax=19)
reg.best <- regsubsets(median_dwell~.,data=LM_2, nvmax=4)
coef(reg.best,10)
reg.best <- regsubsets(median_dwell~.,data=LM_2, nvmax=4)
coef(reg.best)
# estimation on the full dataset
reg.best <- regsubsets(median_dwell~.,data=LM_2, nvmax=4)
reg.best
coef(reg.best,1)
coef(reg.best,2)
coef(reg.best,3)
coef(reg.best,4)
coef(reg.best,5)
coef(reg.best,2)
range(median_dwell)
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device  + BC.primary)
summary(mod_multivariate_complete) #0.6932
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device  + BC.primary + BC.home)
summary(mod_multivariate_complete) #0.6932
coef(reg.best,1)
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.device*BC.stop  + BC.primary + BC.home)
summary(mod_multivariate_complete) #0.6932
mod_multivariate_complete=lm(formula = BC.median ~ BC.stop + BC.device + BC.device*BC.stop  + BC.primary + BC.home + BC.primary*BC.home)
summary(mod_multivariate_complete) #0.6932
vif(mod_multivariate_complete) # c'è collinearità
mod_multivariate_complete=lm(formula = BC.median ~  BC.device*BC.stop  + BC.primary*BC.home)
summary(mod_multivariate_complete) #0.6932
mod_multivariate_complete=lm(formula = BC.median ~  BC.device*BC.stop  + BC.primary*BC.home)
summary(mod_multivariate_complete) #0.6932
mod_multivariate_complete=lm(formula = BC.median ~  BC.device:BC.stop  + BC.primary:BC.home)
summary(mod_multivariate_complete) #0.6932
summary(model.matrix(BC.median ~ BC.stop + BC.device + BC.primary + BC.home))
View(New_York_County)
1/raw_device_counts
plot(1/raw_device_counts, median_dwell)
plot(1/raw_device_counts, median_dwell, xlim = c(0,0.02))
New_York_County$popularity_by_hour_monday
which(raw_stop_counts- raw_device_counts<0)
New_York_County[329,]
range(raw_stop_counts- raw_device_counts)
plot(raw_stop_counts-raw_device_counts, median_dwell)
plot(raw_stop_counts-raw_device_counts, median_dwell, xlim = c(0,20000))
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Patterns_NY.RData")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = data.frame(census_blocks_ny[CBG_ny_index,])
census_blocks_ny$geometry
census_blocks_ny$geometry[[1]]
library(geosphere)
library(sf)
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
plot(New_York_County$stops_by_day, New_York_County$median_dwell)
plot(New_York_County$raw_stop_counts, New_York_County$median_dwell)
x11()
plot(New_York_County$raw_stop_counts, New_York_County$median_dwell)
attach(New_York_County)
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
plot(BC.stop, BC.median)
x11()
plot(BC.stop, BC.median)
index_stop<-which(BC.stop<=6.2)
index_stop<-which(BC.stop<=6.2)
x11()
plot(st_geometry(census_blocks_ny$geometry[index_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
x11()
plot(st_geometry(census_blocks_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red"))
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
plot(st_geometry(census_blocks_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red"))
x11()
plot(st_geometry(census_blocks_ny$geometry, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
plot(st_geometry(census_blocks_ny$geometry, xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
x11()
plot(st_geometry(census_blocks_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
x11()
plot(st_geometry(census_blocks_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
x11()
plot(st_geometry(census_blocks_ny$geometry[CBG_ny_index]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
detach(LM_1)
detach(LM_1)
detach(LM_1)
detach(New_York_County)
detach(New_York_County)
detach(LM_2)
library(geosphere)
library(sf)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# terri
#load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData") #TERRI
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
attach(New_York_County)
lambda_multivariate <- powerTransform(cbind(raw_stop_counts, raw_device_counts,distance_from_home,distance_from_primary_daytime_location,median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
index_stop<-which(BC.stop<=6.2)
x11()
plot(st_geometry(census_blocks_ny$geometry[CBG_ny_index]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
rm(list = c())
library(geosphere)
library(sf)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
view(New_York_County)
View(New_York_County)
lambda_multivariate <- powerTransform(cbind(New_York_County$raw_stop_counts, New_York_County$raw_device_counts,New_York_County$distance_from_home,New_York_County$distance_from_primary_daytime_location,New_York_County$median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
index_stop<-which(BC.stop<=6.2)
index_stop
area_stop<-New_York_County$area[index_stop,]
area_stop<-New_York_County$area[index_stop]
area_stop
index_stop<-which(BC.stop<=6.2)
area_stop<-New_York_County$area[index_stop]
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
plot(st_geometry(census_blocks_ny$geometry[CBG_ny_index]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
plot(st_geometry(census_blocks_ny$geometry[CBG_ny_index]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
x11()
plot(st_geometry(census_blocks_ny$geometry[CBG_ny_index]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
View(CBG_ny)
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
library(geosphere)
library(sf)
# fra
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Data frame county/New York County.RData") # FRA
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
load("C:/Users/franc/Desktop/PoliMI/Anno Accademico 2020-2021/Applied Statistics/Progetto/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
View(New_York_County)
# order patterns_ny and census_block_ny by CBG of New York County
New_York_County=New_York_County[order(New_York_County$area),]
CBG_ny_index = which(census_blocks_ny$County=="New York County")
CBG_ny = census_blocks_ny[CBG_ny_index,]
View(CBG_ny)
# make the two datasets equal
remove=c()
k=1
for (i in 1:1170) {
index=which(New_York_County$area==CBG_ny$CensusBlockGroup[i])
if (length(index)==0) {
remove[k]=i
k=k+1
}
}
CBG_ny=CBG_ny[-remove,]
CBG_ny=CBG_ny[order(CBG_ny$CensusBlockGroup),]
CBG_ny_index=CBG_ny_index[-remove]
New_York_County$area[[1]]
attach(New_York_County)
lambda_multivariate <- powerTransform(cbind(New_York_County$raw_stop_counts, New_York_County$raw_device_counts,New_York_County$distance_from_home,New_York_County$distance_from_primary_daytime_location,New_York_County$median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
# Loading libraries
library(car)
lambda_multivariate <- powerTransform(cbind(New_York_County$raw_stop_counts, New_York_County$raw_device_counts,New_York_County$distance_from_home,New_York_County$distance_from_primary_daytime_location,New_York_County$median_dwell))
lambda_multivariate
BC.stop <- bcPower(raw_stop_counts, 0)
BC.device <- bcPower(raw_device_counts, 0)
BC.home <- bcPower(distance_from_home, lambda_multivariate$lambda[3])
BC.primary <- bcPower(distance_from_primary_daytime_location, lambda_multivariate$lambda[4])
BC.median <- bcPower(median_dwell, lambda_multivariate$lambda[5])
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
index_stop<-which(BC.stop<=6.2)
index_stop
LM_2 <- data.frame(BC.stop,BC.device ,BC.home,BC.primary,median_dwell )
index_stop<-which(BC.stop<=6.2)
area_stop<-New_York_County$area[index_stop]
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
index_stop<-which(BC.stop<=6.3)
area_stop<-New_York_County$area[index_stop]
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
index_stop<-which(BC.stop<=6.4)
area_stop<-New_York_County$area[index_stop]
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
index_stop<-which(BC.stop<=6.5)
area_stop<-New_York_County$area[index_stop]
index_cbg_stop<-c()
for (i in 1:length(area_stop))
index_cbg_stop[i] <- which(area_stop[i]==CBG_ny$CensusBlockGroup)
x11()
plot(st_geometry(CBG_ny$geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
par(new=T)
plot(st_geometry(CBG_ny$geometry[index_cbg_stop]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
area_stop
