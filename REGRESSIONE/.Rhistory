}
x11()
for(i in 1:30){
plot(aa[((i*24)-23):(i*24)], col = i, type="l");
par(new=TRUE)
}
length(device_home_areas[[1]])
length(device_home_areas)
dim(device_home_areas)
dim(device_home_areas)[1]
# device_home_areas -> possibili info da estrarre(quante persone singole, da quanti posti diversi home diverse...)
# weekday_device_home_areas
# weekend_device_home_areas
count_home_areas <- length(device_home_areas[[1:n]])
# device_home_areas -> possibili info da estrarre(quante persone singole, da quanti posti diversi home diverse...)
# weekday_device_home_areas
# weekend_device_home_areas
count_home_areas <- rep(0,n)
count_home_areas[1:n] <- length(device_home_areas[[1:n]])
length(device_home_areas[[1:2]])
length(device_home_areas[[1]])
# device_home_areas -> possibili info da estrarre(quante persone singole, da quanti posti diversi home diverse...)
# weekday_device_home_areas
# weekend_device_home_areas
count_home_areas <- rep(0,n)
for (i in 1:n){
count_home_areas[1:n] <- length(device_home_areas[[i]]);
}
count_home_areas
which(count_home_areas != 102)
colnames(device7)
colnames(device_home_areas[[¹]])
colnames(device_home_areas[[1]])
names(device_home_areas[[1]])
which(names(device_home_areas[[1]]) != names(device_home_areas[[2]])
which(names(device_home_areas[[1]]) != names(device_home_areas[[2]][1])
names(device_home_areas[[1]])[2]
which(names(device_home_areas[[1]]) != names(device_home_areas[[2]])[2])
which(names(device_home_areas[[1]]) != "360610106023"
)
which(names(device_home_areas[[1]]) == "360610106023")
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
attach(census_blocks_ny)
index_homes <- names(device_home_areas);
help("append")
aa<-1
aa<-c(!)
aa<-c(1)
append(aa,2)
append(aa,c(1,2,3,4))
help("merge")
merge(aa,c(1,2,3,4))
aa<-c(1)
append(aa,c(1,2,3,4))
unique(aa)
aa
append(aa,c(1,2,3,4))
aa
aa<-append(aa, c(1,2,3,4))
aa
unique(aa)
aa
attach(census_blocks_ny)
detach(census_blocks_ny)
detach(census_blocks_ny)
detach(census_blocks_ny)
attach(census_blocks_ny)
for(i in 1:n){
all_homes <- append(all_homes,names(device_home_areas[[i]]));
all_homes <- unique(all_homes);
}
all_homes <- c();
for(i in 1:n){
all_homes <- append(all_homes,names(device_home_areas[[i]]));
all_homes <- unique(all_homes);
}
all_homes <- c();
aa
for(i in 1:n){
all_homes <- append(all_homes,names(device_home_areas[[i]]));
all_homes <- unique(all_homes);
}
102*n
View(census_blocks_ny)
length(all_homes)
for(i in 1:n){
all_homes <- append(all_homes,names(device_home_areas[[i]]));
all_homes <- unique(all_homes);
}
for(i in 1:length(all_homes)){
index_homes[i] <- which(CensusBlockGroup == all_homes[i]);
}
index_homes <- c();
for(i in 1:length(all_homes)){
index_homes[i] <- which(CensusBlockGroup == all_homes[i]);
}
i <- 1;
which(CensusBlockGroup == all_homes[i])
which(CensusBlockGroup == all_homes[15])
all_homes[15]
all_homes[16]
index_homes <- c();
for(i in 1:length(all_homes)){
j <- which(CensusBlockGroup == all_homes[i]);
if (j != 0)
index_homes[i] <- j;
}
all_homes[15] == 0
which(CensusBlockGroup == all_homes[15]) == 0
which(CensusBlockGroup == all_homes[15])
which(CensusBlockGroup == all_homes[15]) == integer(0)
if(which(CensusBlockGroup == all_homes[15]))
a <-1;
help("which")
which(c(1,2,3) == 4)
which(c(1,2,3) == 4) > 0
which(c(1,2,3) == 4) == 0
which(c(1,2,3) == 4) == FALSE
which(c(1,2,3) == 1) == 1
which(c(1,2,3) == 4) == integer(0)
which(c(1,2,3) == 4) == (integer(0))
integer(0)
help("integer(0")
help("integer(0)")
help("integer")
which(c(1,2,3) == 4)
if(which(c(1,2,3) == 4) )
print(ok)
if(which(c(1,2,3) == 1) )
print(ok)
print("ok")
if(which(c(1,2,3) == 1) )
print("ok")
index_homes <- c();
for(i in 1:length(all_homes) && 1!=15){
j <- which(CensusBlockGroup == all_homes[i]);
if (j)
index_homes[i] <- j;
}
index_homes <- c();
for(i in 1:length(all_homes) && 1!=15){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
index_homes <- c();
for(i in 1:length(all_homes) && i!=15){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[17]
device_home_areas[17]
all_homes[17]
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=c(15,17)){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
index_homes[30]
all_homes[30]
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[58]
i <-58;
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
index_homes[i]
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[57]
which(CensusBlockGroup == 420250201052)
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30 && 1!=57){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30 && i!=57){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[59]
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30 && i!=57 && i!=59){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[63]
all_homes[62]
index_homes <- c();
for(i in 1:length(all_homes)){
if(i!=15 && i!=17 && i!= 30 && i!=57 && i!=59 && i!=62){
j <- which(CensusBlockGroup == all_homes[i]);
index_homes[i] <- j;
}
}
all_homes[68]
all_homes[67]
i<-15;
j <- which(CensusBlockGroup == all_homes[i]);
j
j == FALSE
j == 0
j == integer(0)
a<-integer(0)
j == a
type(j)
j == NA
j == NULL
j == which(CensusBlockGroup == all_homes[15])
j == int(0)
length(j) ==0
j == 1
length(j) ==0
j<-1
length(j) ==0
index_homes <- c(); #(...tropp ..i!=15 && i!=17 && i!= 30 && i!=57 && i!=59 && i!=62o )
index_home_problematic <- c();
for(i in 1:length(all_homes)){
j <- which(CensusBlockGroup == all_homes[i]);
if(length(j) != 0){
index_homes <-append(index_homes,j);
}
else{
index_home_problematic <- append(indec_home_problematic, i);
}
}
index_homes <- c(); #(...tropp ..i!=15 && i!=17 && i!= 30 && i!=57 && i!=59 && i!=62o )
index_home_problematic <- c();
for(i in 1:length(all_homes)){
j <- which(CensusBlockGroup == all_homes[i]);
if(length(j) != 0){
index_homes <-append(index_homes,j);
}
else{
index_home_problematic <- append(index_home_problematic, i);
}
}
x11()
#plot(st_geometry($geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
#par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_homes]), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ",col = "red")
dev.off()
x11()
#plot(st_geometry($geometry), xlim = c(-74.1,-73.8), ylim = c(40.68,40.88), xlab = " ", ylab = " ")
#par(new=T)
plot(st_geometry(census_blocks_ny$geometry[index_homes]), xlab = " ", ylab = " ",col = "red")
count_weekday_home_areas <- rep(0,n)
for (i in 1:n){
count_weekday_home_areas[1:n] <- length(weekday_device_home_areas[[i]]); #sono tutti 102 ...
}
count_weekend_home_areas <- rep(0,n)
for (i in 1:n){
count_weekend_home_areas[1:n] <- length(weekend_device_home_areas[[i]]); #sono tutti 102 ...
}
# device_home_areas -> possibili info da estrarre(quante persone singole->sum,
# weekday_device_home_areas    da quanti posti diversi home diverse->count, ...)
# weekend_device_home_areas
count_home_areas <- rep(0,n)
for (i in 1:n){
count_home_areas[i] <- length(device_home_areas[[i]]); #sono tutti 102 ...
}
# device_home_areas -> possibili info da estrarre(quante persone singole->sum,
# weekday_device_home_areas    da quanti posti diversi home diverse->count, ...)
# weekend_device_home_areas
count_home_areas <- rep(0,n)
for (i in 1:n){
count_home_areas[i] <- length(device_home_areas[[i]]);
}
count_weekday_home_areas <- rep(0,n);
for (i in 1:n){
count_weekday_home_areas[i] <- length(weekday_device_home_areas[[i]]);
}
count_weekend_home_areas <- rep(0,n)
for (i in 1:n){
count_weekend_home_areas[i] <- length(weekend_device_home_areas[[i]]);
}
count_breakfast_home_areas <- rep(0,n)
for (i in 1:n){
count_breakfast_home_areas[i] <- length(weekday_device_home_areas[[i]]); ...
}
count_breakfast_home_areas <- rep(0,n);
for (i in 1:n){
count_breakfast_home_areas[i] <- length(weekday_device_home_areas[[i]]); ...
}
count_breakfast_home_areas <- rep(0,n);
for (i in 1:n){
count_breakfast_home_areas[i] <- length(breakfast_device_home_areas[[i]]);
}
count_breakfast_home_areas <- rep(0,n);
for (i in 1:n){
count_breakfast_home_areas[i] <- length(breakfast_device_home_areas[[i]]);
}
count_lunch_home_areas <- rep(0,n);
for (i in 1:n){
count_lunch_home_areas[i] <- length(lunch_device_home_areas[[i]]);
}
count_afternoon_home_areas <- rep(0,n);
for (i in 1:n){
count_afternoon_home_areas[i] <- length(afternoon_device_home_areas[[i]]);
}
count_dinner_home_areas <- rep(0,n);
for (i in 1:n){
count_dinner_home_areas[i] <- length(dinner_device_home_areas[[i]]);
}
count_nightlife_home_areas <- rep(0,n);
for (i in 1:n){
count_nightlife_home_areas[i] <- length(nightlife_device_home_areas[[i]]);
}
count_afternoon_home_areas <- rep(0,n);
for (i in 1:n){
count_afternoon_home_areas[i] <- length(afternoon_tea_device_home_areas[[i]]);
}
# work_hours_device_home_areas
# work_behavior_device_home_areas: device che sono stati in quest'area per almeno 6 ore -> mh .... interesting
count_work_behavior_home_areas <- rep(0,n);
for (i in 1:n){
count_work_behavior_home_areas[i] <- length(work_behavior_device_home_areas[[i]]);
}
work_behavior_device_home_areas[[¹]]
work_behavior_device_home_areas[[1]]
View(New_York_County)
colnames(New_York_County)
work_behavior_device_home_areas[[1]]
attach(patterns_ny)
work_behavior_device_home_areas[[1]]
# work_hours_device_home_areas
count_work_hours_home_areas <- rep(0,n);
for (i in 1:n){
count_work_hours_home_areas[i] <- length(work_hours_device_home_areas[[i]]);
}
# stops_by_day -> utile da capire che info estarre(max, min, mean, diff)
mean_stops_by_day <- c();
max_stops_by_day <- c();
min_stops_by_day <- c();
for (i in 1:n){
mean_stops_by_day[i] <- mean(stops_by_day[[i]]);
max_stops_by_day[i] <- max(stops_by_day[[i]]);
min_stops_by_day[i] <- min(stops_by_day[[i]]); #mh non credo servirà
}
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData")
New_York_County<-New_York_County[-92,]
attach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(census_block_ny)
detach(CensusBlockGroup)
attach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(CensusBlockGroup)
# terri
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Data frame county/New York County.RData")
New_York_County<-New_York_County[-92,]
attach(New_York_County)
detach(patterns_ny)
detach(patterns_ny)
detach(patterns_ny)
attach(New_York_County)
detach(New_York_County)
detach(New_York_County)
detach(New_York_County)
attach(New_York_County)
n <- dim(New_York_County)[1];
# stops_by_day -> utile da capire che info estarre(max, min, mean, diff)
mean_stops_by_day <- c();
max_stops_by_day <- c();
min_stops_by_day <- c();
i <-1;
mean_stops_by_day[i] <- mean(stops_by_day[[i]]);
# stops_by_day -> utile da capire che info estarre(max, min, mean, diff)
mean_stops_by_day <- c();
max_stops_by_day <- c();
min_stops_by_day <- c();
for (i in 1:n){
mean_stops_by_day[i] <- mean(stops_by_day[[i]]);
max_stops_by_day[i] <- max(stops_by_day[[i]]);
min_stops_by_day[i] <- min(stops_by_day[[i]]); #mh non credo servirà
}
# stops_by_each_hour -> utile da capire che info estrarre
mean_stops_by_each_hour <- c();
max_stops_by_each_hour <- c();
min_stops_by_each_hour <- c();
for (i in 1:n){
mean_stops_by_each_hour[i] <- mean(stops_by_each_hour[[i]]);
max_stops_by_each_hour[i] <- max(stops_by_each_hour[[i]]);
min_stops_by_each_hour[i] <- min(stops_by_each_hour[[i]]); #mh non credo servirà
}
# device_home_areas -> possibili info da estrarre(quante persone singole->sum,
# weekday_device_home_areas    da quanti posti diversi home diverse->count, differenza tra qst,...)
# weekend_device_home_areas
count_home_areas <- rep(0,n);
for (i in 1:n){
count_home_areas[i] <- length(device_home_areas[[i]]);
}
count_weekday_home_areas <- rep(0,n);
for (i in 1:n){
count_weekday_home_areas[i] <- length(weekday_device_home_areas[[i]]);
}
count_weekend_home_areas <- rep(0,n);
for (i in 1:n){
count_weekend_home_areas[i] <- length(weekend_device_home_areas[[i]]);
}
load("/home/terri/Documenti/UNIVERSITA/STAT APP/progetto/gitcode/Applied-statistics-project/DATASET/Conversione dal dataset originale ad adesso/Cyber_Capital.RData")
attach(census_blocks_ny)
count_breakfast_home_areas <- rep(0,n);
for (i in 1:n){
count_breakfast_home_areas[i] <- length(breakfast_device_home_areas[[i]]);
}
count_lunch_home_areas <- rep(0,n);
for (i in 1:n){
count_lunch_home_areas[i] <- length(lunch_device_home_areas[[i]]);
}
count_afternoon_home_areas <- rep(0,n);
for (i in 1:n){
count_afternoon_home_areas[i] <- length(afternoon_tea_device_home_areas[[i]]);
}
count_dinner_home_areas <- rep(0,n);
for (i in 1:n){
count_dinner_home_areas[i] <- length(dinner_device_home_areas[[i]]);
}
count_nightlife_home_areas <- rep(0,n);
for (i in 1:n){
count_nightlife_home_areas[i] <- length(nightlife_device_home_areas[[i]]);
}
# work_hours_device_home_areas
count_work_hours_home_areas <- rep(0,n);
for (i in 1:n){
count_work_hours_home_areas[i] <- length(work_hours_device_home_areas[[i]]);
}
# work_behavior_device_home_areas: device che sono stati in quest'area per almeno 6 ore -> mh .... interesting
count_work_behavior_home_areas <- rep(0,n);
for (i in 1:n){
count_work_behavior_home_areas[i] <- length(work_behavior_device_home_areas[[i]]);
}
LM_casuale = data.frame(median_dwell, max_stops_by_day, mean_stops_by_day, min_stops_by_day,
max_stops_by_each_hour,mean_stops_by_each_hour, min_stops_by_each_hour);
x11()
pairs(LM_causale)
pairs(LM_casuale)
LM_casuale = data.frame(median_dwell, max_stops_by_day, mean_stops_by_day, min_stops_by_day);
#max_stops_by_each_hour,mean_stops_by_each_hour, min_stops_by_each_hour);
x11()
pairs(LM_casuale)
LM_casuale = data.frame(median_dwell, count_home_areas);
x11()
pairs(LM_casuale)
lambda_multivariate <- powerTransform(cbind(median_dwell, count_home_areas));
lambda_multivariate
#LM_casuale = data.frame(median_dwell, max_stops_by_day, mean_stops_by_day, min_stops_by_day,
#                                      max_stops_by_each_hour,mean_stops_by_each_hour, min_stops_by_each_hour);
LM_casuale = data.frame(median_dwell, count_home_areas, count_weekday_home_areas);
lambda_multivariate <- powerTransform(cbind(median_dwell, count_home_areas));
lambda_multivariate <- powerTransform(cbind(median_dwell, count_home_areas, count_weekday_home_areas));
# Loading
library(car)
library(geosphere)
library(sf)
lambda_multivariate <- powerTransform(cbind(median_dwell, count_home_areas, count_weekday_home_areas));
which(median_dwell <0)
which(count_home_areas <0)
#LM_casuale = data.frame(median_dwell, max_stops_by_day, mean_stops_by_day, min_stops_by_day,
#                                      max_stops_by_each_hour,mean_stops_by_each_hour, min_stops_by_each_hour);
LM_casuale = data.frame(median_dwell, sum_device_home_areas, sum_weekday_device_home_areas);
x11()
pairs(LM_casuale)
lambda_multivariate <- powerTransform(cbind(count_home_areas, count_weekday_home_areas, median_dwell));
which(count_home_areas <0)
which(median_dwell <0)
which(median_dwell == NA)
which(median_dwell == NULL)
which(median_dwell == 0)
lambda_multivariate <- powerTransform(cbind(New_York_County$raw_stop_counts, New_York_County$raw_device_counts,New_York_County$distance_from_home,New_York_County$distance_from_primary_daytime_location,New_York_County$median_dwell))
lambda_multivariate
lambda_multivariate <- powerTransform(cbind(New_York_County$raw_stop_counts, New_York_County$raw_device_counts,New_York_County$distance_from_home,New_York_County$distance_from_primary_daytime_location)~New_York_County$median_dwell)
lambda_multivariate
lambda_multivariate <- powerTransform(cbind(count_home_areas, count_weekday_home_areas, median_dwell));
which(count_home_areas == 0)
